WEB DEVELOPMENT CODECADEMY:

(directory = carpeta)
-----LECCION 1----- 
NAVIGATING THE FILE SYSTEM
INTRO TO COMMAND LINE: The command line is a text interface for the computer’s operating system. You can use it to 
traverse and edit your computer’s filesystem. Through the command line, you can create new files, edit the 
contents of those files, delete files, and more! The advantage of using the command line is its power. You can run 
programs, write scripts to automate common tasks, and combine simple commands to handle difficult tasks.
On Mac and Linux systems, we access the command line through something called Bash. Although Windows comes with a 
different built-in command line, Windows users can also download Bash. 

FILESYSTEM: A filesystem organizes a computer’s files and directories into a tree structure:
1. The first directory in the filesystem is the **root directory.** It is the parent of all other directories and 
   files in the filesystem.
2. Each parent directory can contain more child directories and files.
3. Each directory can contain more files and child directories. The parent-child relationship continues as long as 
   directories and files are nested.
Filesystem example: https://content.codecademy.com/courses/learn-command-line/img/LCL-fileTrees-01.png

THE COMMAND 'ls': A command is a directive to the computer to perform a specific task. When you type ls, the 
command line looks at the directory you are in, and then “lists” all the files and directories inside of it.
In the terminal, the first thing you see is $. This is called a shell prompt. It appears when the terminal is 
ready to accept a command.
If we typed:
  $ ls

the terminal would display our current directory’s files and directories:
  2014  2015  hardware.txt

The directories 2014, 2015, and the file hardware.txt are the contents of the current directory.


THE COMMAND 'pwd': **pwd** stands for “print working directory.” It outputs the name of the directory you are 
currently in, called the working directory. Here is an example:
  $ pwd
  /home/ccuser/workspace/blog   (<-- this is what the console prints)


THE COMMAND 'cd': It stands for “change directory.” Just as you would click on a folder in Windows Explorer, cd 
switches you into the directory you specify. In other words, cd changes the working directory.
Let’s say the directory we change into is 2015:
  $ cd 2015

When a file, directory, or program is passed into a command, it is called an argument. Here the 2015 directory is an 
argument for the cd command. The cd command takes a directory name as an argument and switches into that directory.

Instead of using cd twice in order to move from 2015 to memory (/home/ccuser/workspace/blog/2015/jan/memory), we 
can use it once and give it a longer argument:
  $ cd jan/memory

To move up one directory, we use cd ..: (esto me sirve para volver atras)
  $ cd ..
Here, cd .. navigates up from jan/memory/ to jan/.


THE COMMAND 'mkdir': Now that we can traverse the existing filesystem, let’s try editing it by making directories 
(folders) through the command line. The command for that is mkdir:
  $ mkdir media

The mkdir command stands for “make directory”. It takes in a directory name as an argument and then creates a new 
directory in the current working directory. Here we used mkdir to create a new directory named media/ inside our 
working directory.

We’ve made our new media directory, but what if we wanted to create another directory inside that one? We could 
make the new directory from our current position by using a / to combine arguments as we did in the last lesson.
Using:
  $ mkdir media/tv (crea las dos carpetas a la vez, o crea a la carpeta 'tv' si estoy en el directorio que 
		    contiene a 'media')


THE COMMAND 'touch': Now we know how to create directories through the command line, but how do we create new files?
We can do this using the command touch:
  $ touch keyboard.txt

The touch command creates a new file inside the working directory. It takes in a filename as an argument and then 
creates an empty file with that name in the current working directory.

HELPER COMMANDS: Let’s look at some helpful commands that will make using it easier!
THE COMMAND 'clear': clear is used to clear your terminal, which is useful when it’s full of previous commands and 
                     outputs. It doesn’t change or undo your previous commands, it just clears them from the view. 
                     You can scroll upwards to see them at any time.

THE 'tab' KEY: tab can be used to autocomplete your command. When you are typing the name of an existing file or 
               directory, you can use tab to finish the rest of the name.

THE 'up' AND 'down' ARROW KEYS: They can be used to cycle through your previous commands. ↑ will take you up 
                                through your most recent commands, and ↓ will take you back through to the most 
                                recent one.

RESUME: 
From the command line, you can navigate through files and folders on your computer:
  - pwd outputs the name of the current working directory.
  - ls lists all files and directories in the working directory.
  - cd switches you into the directory you specify.
  - mkdir creates a new directory in the working directory.
  - touch creates a new file inside the working directory.

You can use helper commands to make navigation easier:
  - clear clears the terminal
  - tab autocompletes the name of a file or directory
  - ↑ and ↓ allow you to cycle through previous commands
  

-----LECCION 2----- 
WHAT IS BASH?: Bash, or the Bourne-Again SHell, is a CLI that was created as a free software replacement for the 
Bourne Shell. A shell is a specific kind of CLI. Bash is “open source,” which means that anyone can read the code 
and suggest changes. 

BASH SETUP FOR WINDOWS: Windows has a CLI called Command Prompt. While this has many of the same features as Bash, 
Bash is much more popular. Because of the strength of the open source community and the tools they provide, 
mastering Bash is a better investment than mastering Command Prompt.

To use Bash on a Windows computer, we will download and install a program called Git Bash. Git Bash allows us to 
easily access Bash as well as another tool we’ll be using later called Git, inside the Windows environment.
You can watch the following video: https://www.youtube.com/watch?v=sQY0g7s2hac&feature=emb_title


-----LECCION 3----- 
MANIPULATION
ls, REVISITED: The 'ls' command lists all files and directories in the working directory. We can use ls as is, or 
attach an option. Options modify the behavior of commands. For example:
  ls -a

This command displays all the files and directories, including those starting with a dot (.). Files starting with 
a dot are normally hidden, and don’t appear when using ls alone.

In addition to -a, the ls command has several more options. Here are three common ones:
-a - lists all contents, including hidden files and directories
-l - lists all contents of a directory in long format, as well as the file permissions
-t - orders files and directories by the time they were last modified.
-alt - lists all contents, including hidden files and directories, in long format, ordered by the date and time 
       they were last modified.

'cat' COMMAND: The cat command outputs the contents of a specified file. For example:
  cat action/superwoman.txt
will output all the text from superwoman.txt.

This is a useful command for peeking at files without opening them, and confirming the result of other commands 
that change the contents of files.

'cp' COMMAND: Let’s move on to copying, moving, and removing files and directories from the command line. The cp 
command copies files or directories. Below, we copy the contents of a source file into a destination file:
  cp source.txt destination.txt 

We could also copy a file to a destination directory:
  cp source.txt destination/

To copy multiple files into a directory, use cp with a list of source files as the first arguments, and the 
destination directory as the last argument. Here, we copy the files file1.txt and file2.txt into the same directory.
  cp file1.txt file2.txt my_directory/ 

WILDCARDS: In addition to using exact filenames as arguments, we can use special characters like * to select groups 
of files. These special characters are called wildcards. For example, here we use cp to copy all files in the 
current working directory into another directory.
  cp * my_directory/

In the next example, w*.txt selects all files in the working directory starting with “w” (prefix) and ending with 
“.txt” (suffix), and copies them to my_directory/.
  cp w*.txt my_directory/

'mv' COMMAND: This command moves files. mv moves a file without making a copy. To move a file into a directory, use 
mv with the source file as the first argument and the destination directory as the second argument. 
Here we move my_file.txt into my_directory/.
  mv my_file.txt my_directory/

To move multiple files into a directory, use mv with a list of source files as the first arguments, and the 
destination directory as the last argument. 
Here, we move my_file_1.txt and my_file_2.txt into my_directory/.
  mv my_file_1.txt my_file_2.txt my_directory/

To rename a file, use mv with the old file as the first argument and the new file as the second argument. By moving 
file_original.txt into file_renamed.txt, we rename the file as file_renamed.txt.
  mv file_origin.txt file_renamed.txt

'rm' AND 'rm -r' COMMANDS: The rm command deletes files and directories. 
Here we remove the file unwanted_file.txt from the filesystem.
  rm unwanted_file.txt

The -r is an option that modifies the behavior of the rm command. The -r stands for “recursive,” and it’s used to 
delete a directory and all of its child directories. For example:
  rm -r unwanted_directory

Be careful when you use rm! It deletes files and directories permanently. There isn’t an undelete command, so once 
you delete a file or directory with rm, it’s gone.

REVIEW: 
1. Options modify the behavior of commands:
  - ls -a lists all contents of a directory, including hidden files and directories
  - ls -l lists all contents in long format
  - ls -t orders files and directories by the time they were last modified
  - Multiple options can be used together, like ls -alt

2. From the command line, you can also copy, move, and remove files and directories:
  - cp copies files
  - mv moves and renames files
  - rm removes files
  - rm -r removes directories

3. Wildcards are useful for selecting groups of files and directories



-----LECCION 4----- 
REDIRECTING INPUT & OUTPUT
INTRO: Up until now, we have run commands in the command line and received a stream of output in the terminal. In 
this lesson, we’ll focus on input and output (I/O) redirection.

What happens when you type this command?
  $ echo "Hello"
  Hello

The echo command accepts the string “Hello” as standard input, and echoes the string “Hello” back to the terminal 
as standard output.

Let’s learn more about standard input, standard output, and standard error:
1. standard input, abbreviated as stdin, is information inputted into the terminal through the keyboard or input 
   device.
2. standard output, abbreviated as stdout, is the information outputted after a process is run.
3. standard error, abbreviated as stderr, is an error message outputted by a failed process.

YOUR FIRST REDIRECT: How does redirection work?
  $ echo "Hello" > hello.txt

The > command redirects the standard output to a file. Here, "Hello" is entered as the standard input, and is then 
redirected to the file hello.txt by > .

As a reminder, the cat command outputs the contents of a file to the terminal. When you type:
  $ cat hello.txt
the contents of hello.txt are displayed. You should see "Hello" printed to the console.

'>' COMMAND: 
  $ cat deserts.txt > forests.txt
> takes the standard output of the command on the left, and redirects it to the file on the right. Here the 
standard output of cat deserts.txt is redirected to forests.txt.

Note that > overwrites all original content in forests.txt. When you view the output data by using cat on 
forests.txt, you will see only the contents of deserts.txt.

'>>' COMMAND: Now we know how to overwrite a file’s contents, but what if we want to be able to add to a file 
without losing the original text? We can use the >> command! >> takes the standard output of the command on the 
left and appends (adds) it to the file on the right.
  $ cat deserts.txt >> forests.txt

Here, the output data of forests.txt will contain the original contents of forests.txt with the content of 
deserts.txt appended to it.

'<' COMMAND: < takes the standard input from the file on the right and inputs it into the program on the left.
  $ cat < deserts.txt
Here, deserts.txt is the standard input for the cat command. The standard output appears in the terminal.


'|' COMMAND: | is a “pipe.” The | takes the standard output of the command on the left, and pipes it as standard 
input to the command on the right. You can think of this as “command to command” redirection.
  $ cat volcanoes.txt | wc  

Above, the output of cat volcanoes.txt becomes the standard input of wc. in turn, the wc command outputs the number 
of lines, words, and characters in volcanoes.txt, respectively.
  $ cat volcanoes.txt | wc | cat > islands.txt 

Multiple |s can be chained together. Here the standard output of cat volcanoes.txt is “piped” to the wc command. 
The standard output of wc is then “piped” to cat. Finally, the standard output of cat is redirected to islands.txt.

You can view the output data of this chain by typing cat islands.txt.


'sort' COMMAND: ort takes the standard input and orders it alphabetically for the standard output (it doesn’t 
change the file itself). 
  $ sort continents.txt 

Here, the continents in continents.txt will be listed in alphabetical order:
  Africa
  Antarctica
  Asia
  Australia
  Europe
  North America
  South America


'uniq' COMMAND: uniq stands for “unique.” It filters out adjacent, duplicate lines in a file.
  $ uniq deserts.txt 
Here uniq deserts.txt filters out duplicates of "Sahara Desert", because its duplicate directly follows the previous 
instance. The “Kalahari Desert” duplicates are not adjacent, and thus remain.

A more effective way to use uniq is to call sort to alphabetize a file, and “pipe” the standard output to uniq. By 
piping sort deserts.txt to uniq, all duplicate lines are alphabetized (and thereby made adjacent) and filtered out.
  sort deserts.txt | uniq > uniq-deserts.txt 
This uses piping to create a new file named uniq-deserts.txt that contains a sorted version of deserts.txt


'grep' AND 'grep -i' COMMANDS: grep stands for “global regular expression print.” It searches files for lines that 
match a pattern and then returns the results. It is also case sensitive.
  $ grep America continents.txt 
Above, grep searched for anything that matched “America” in continents.txt.

grep -i enables the command to be case insensitive.
  $ grep -i America continents.txt
Here, grep searched for capital or lowercase strings that match “America” in continents.txt. Note that we don’t use 
quotes in our command.

'grep -R' COMMAND: grep -R searches all files in a directory and outputs filenames and lines containing matched 
results. -R stands for “recursive”.
  $ grep -R Arctic /home/ccuser/workspace/geography

  /home/ccuser/workspace/geography/deserts.txt:Arctic Desert
  /home/ccuser/workspace/geography/oceans.txt:Arctic Ocean

Above, grep -R searched the /home/ccuser/workspace/geography directory for the string “Arctic” and outputted 
filenames and lines with matching results.

'grep -Rl' COMMAND: 
grep -Rl searches all files in a directory and outputs only filenames with matched results (so no lines). 
'l' (a lowercase L, not a capital i) stands for “files with matches.”
  $ grep -Rl Arctic /home/ccuser/workspace/geography

  /home/ccuser/workspace/geography/deserts.txt
  /home/ccuser/workspace/geography/oceans.txt

Here grep -Rl searched the /home/ccuser/workspace/geography directory for the string “Arctic” and outputs filenames 
with matched results.

'sed' COMMAND: sed stands for “stream editor.” It accepts standard input and modifies it based on an expression, 
before displaying it as output data. It is similar to “find and replace.”
  sed 's/snow/rain/' forests.txt 

Let’s look at the expression 's/snow/rain/':
  - s: stands for “substitution.” It is always used when using sed for substitution.
  - snow: the search string, or the text to find.
  - rain: the replacement string, or the text to add in place.

In this case, sed searches forests.txt for the word “snow” and replaces it with “rain.” Importantly, the above 
command will only replace the first instance of “snow” on a line.

  sed 's/snow/rain/g' forests.txt 
The above command uses the g expression, meaning “global.” Here sed searches forests.txt for the word “snow” and 
replaces it with “rain” globally. This means all instances of “snow” on a line will be turned to “rain.”

sed as we’ve used it will only rewrite the command line output and the actual file won’t be changed. In order to 
rewrite the actual file, we need to use -i at the beginning of the command:
  sed -i 's/snow/rain/g' forests.txt

The above command will rewrite forests.txt and replace all instances (since we’re also using g) of “snow” with 
“rain”.

REVIEW:
1. Redirection reroutes standard input, standard output, and standard error.

2. The common redirection commands are:
  - > redirects standard output of a command to a file, overwriting previous content.
  - >> redirects standard output of a command to a file, appending new content to old content.
  - < redirects standard input to a command.
  - | redirects standard output of a command to another command.

3. A number of other commands are powerful when combined with redirection commands:
  - sort: sorts lines of text alphabetically.
  - uniq: filters duplicate, adjacent lines of text.
  - grep: searches for a text pattern and outputs it.
  - sed : searches for a text pattern, modifies it, and outputs it.



-----LECCION 5----- 
CONFIGURING THE ENVIRONMENT
INTRO: Each time we launch the terminal application, it creates a new session. The session immediately loads 
settings and preferences that make up the command line environment.

We can configure the environment to support the commands and programs we create. This enables us to customize 
greetings and create nicknames (aliases) for commands, and create variables to share across commands and programs.

NANO: nano is a command line text editor. It works the same way as a desktop text editor like TextEdit or Notepad, 
except that it is accessible from the command line and only accepts keyboard input.
Let's do this:
  $ nano hello.txt
  "Hello, I am nano." 

Using the menu at the bottom of the terminal for reference, type Ctrl + O (the letter, not zero) to save the file. 
The keys are not case-sensitive, so don’t worry about capitalizing.
Press Enter, when prompted about the filename to write.
Then type Ctrl + X to exit nano.

Let’s walk through what we did in the previous exercise:
- The command nano hello.txt opens a new text file named hello.txt in the nano text editor.
- "Hello, I am nano" is a text string entered in nano at the line indicated by the cursor.
- The menu of keyboard commands at the bottom of the window allow us to save changes to hello.txt and exit nano. 
  The ^ stands for the Ctrl key.
- Ctrl + O saves a file. O stands for output. Again, not case-sensitive.
- Ctrl + X exits the nano program. X stands for exit.
- Ctrl + G opens a help menu.

BASH PROFILE: A bash profile is a file used to store environment settings for your terminal, and it’s accessible 
by the name ~/.bash_profile.

When a session starts, it loads the contents of the bash profile before executing commands.
  - The ~ represents the user’s home directory.
  - The . indicates a hidden file.
  - The name ~/.bash_profile is important, since this is how the command line recognizes the bash profile.

To open and edit the bash profile, you can use the command:
  nano ~/.bash_profile

To activate the changes made in ~/.bash_profile for the current session, use this following command:
  source ~/.bash_profile
This makes the changes in the bash profile available right away without closing the terminal and needing to start 
a new session.

ALIASES: You can add settings and commands that execute every time a new terminal session is started. One type of 
setting you can create is called an alias:
  alias pd="pwd"

The alias command allows you to create keyboard shortcuts, or aliases, for commonly used commands.
The pd alias will be available each time we open a new terminal session, and the output of pd will be the same as 
the pwd command.
source ~/.bash_profile will make the alias pd available in the current session.

We can add as many aliases as we want in a bash profile. Here are two more examples:
  alias hy="history"
'hy' is set as an alias for the history command in the bash profile. The alias is then made available in the 
current session through source. By typing hy, the command line outputs a history of commands that were entered in 
the current session.

Here's another example:
  alias ll="ls -la"
Likewise, the code above sets ll as an alias for ls -la. Once the alias is made available in the current session 
through source, the command ll now executes ls -la and outputs all contents and directories in long format, 
including all hidden files.

ENIVORNMENT VARIABLES: Environment variables are variables that can be used across commands and programs and hold 
information about the environment.

What happens when you store this in ~/.bash_profile?
  export USER="Jane Doe"

1. The line USER="Jane Doe" sets the environment variable USER to a name “Jane Doe”. Usually the USER variable is 
   set to the name of the computer’s owner.
2. The line export makes the variable to be available to all child sessions initiated from the session you are in. 
   This is a way to make the variable persist across programs.
3. At the command line, the command echo $USER returns the value of the variable. Note that $ is always used when 
   returning a variable’s value. Here, the command echo $USER returns the name set for the variable.

PS1 ENVIRONMENT VARIABLE: PS1 is an environment variable that defines the makeup and style of the command prompt.
What happens when this is stored in ~/.bash_profile?
  export PS1=">> "

1. export PS1=">> " sets the command prompt variable and exports the variable. Here we change the default command 
   prompt from $ to >> (el '$' que aparece en cada linea de la consola).
2. After using the source command, the command line displays the new command prompt.

HOME ENVIRONMENT VARIABLE: What happens when you type this command?
  $ echo $HOME 

The HOME variable is an environment variable that displays the path of the home directory ~. You can specify and 
change the HOME variable if needed, but in most cases this is not necessary.

Here, by typing echo $HOME, the terminal displays the path /home/ccuser as output.

PATH ENVIRONMENT VARIABLE: PATH is an environment variable that stores a list of directories separated by a colon.
What happens when you type this command?
  $ echo $PATH
  /home/ccuser/.gem/ruby/2.0.0/bin:/usr/local/sbin:/usr/local/bin:/usr/bin:/usr/sbin:/sbin:/bin

Looking carefully, echo $PATH lists the following directories, separated by :
1. /home/ccuser/.gem/ruby/2.0.0/bin	2. /usr/local/sbin	3. /usr/local/bin	4. /usr/bin
5. /usr/sbin			   	6. /sbin		7. /bin

Each directory contains scripts for the command line to execute. The PATH variable simply lists which directories 
contain scripts.

For example, many commands we’ve learned are scripts stored in the /bin directory.
  /bin/pwd
This is the script that is executed when you type the pwd command.

  /bin/ls
This is the script that is executed when you type the ls command.

THE 'env' COMMAND: The env command stands for “environment,” and returns a list of the environment variables for 
the current user.

What happens when you type the env command?
  env

The env command returns a number of variables, including PATH, PWD, PS1, and HOME. To select the value of a 
particular environment variable, let’s say PATH, you can use the following command:
  env | grep PATH 

the command above displays the value of the PATH environment variable. Here the standard output of env is “piped” 
to the grep command. grep searches for the value of the variable PATH and outputs it to the terminal. Note that 
this is the same output as echo $PATH.

REVIEW: 
1. The nano editor is a command line text editor used to configure the environment.

2. ~/.bash_profile is where environment settings are stored. You can edit this file with nano.

3. Environment variables are variables that can be used across commands and programs and hold information about 
the environment.
  - export VARIABLE="Value" sets and exports an environment variable.
  - USER is the name of the current user.
  - PS1 is the command prompt.
  - HOME is the home directory. It is usually not customized.
  - PATH returns a colon : separated list of file paths. It is customized in advanced cases.
  - env returns a list of environment variables. You can redirect the output, using grep to select the variable 
    you want to see.
