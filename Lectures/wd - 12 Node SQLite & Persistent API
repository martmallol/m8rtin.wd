WEB DEVELOPMENT CODECADEMY

-----LECCION 1----- 
LEARN NODE SQLITE

We will learn how to manage an SQLite database from within JavaScript. We will see how to perform all the 
fundamental features of database management — CREATEing INSERTing and SELECTing, and then interacting with that data 
using the full force of JavaScript — writing functions, wielding objects, and performing calculations.

We’re going to access an SQLite database with temperature data for countries over the last 150 years. We’re going to 
take this data, collect it per year in a JavaScript object, average it, and save it into a new SQL database!

OPENING A DATABASE: To get these two worlds to communicate, we will be importing a package into our JavaScript code. 
This package will allow us to open the channels of communication with our SQLite database. Once we do that, we can 
start writing SQL directly in our JavaScript!

The first order of business is to import the module that will facilitate this connection. Recall that to import a 
module in JavaScript we can use require() like so:

	const sqlite3 = require('sqlite3');

The code above gives us a JavaScript object, called sqlite3 that we can interact with via methods. The first method 
we’re going to use on sqlite3 is going to be the method that opens up a new database. The only argument required to 
open this database is the path to the file that SQLite will use to save the database.

	const db = new sqlite3.Database('./db.sqlite');
	
This code will create a new database file, in the current folder, named db.sqlite. Then we’ll have a database to 
interact with!

RETRIEVING ALL ROWS: Since we have access to our database as a JavaScript object, let’s try running a query on it.
	
	const { printQueryResults } = require('./utils');
	...
	
	db.all("SELECT * FROM Dog WHERE breed='Corgi'", (error, rows) => {
	  printQueryResults(rows);
	});
	
In the previous example, we used the db.all() method to retrieve every dog of breed “Corgi” from a table named Dog 
and print them.

RETRIEVING A SINGLE ROW: db.all() is a useful tool to fetch all the data we have that meets certain criteria. But what if we only want to get a particular row?

Luckily, we have a different method that will fetch a single row from a database: db.get(). See it in action:

	db.get("SELECT * FROM Dog WHERE owner_name = 'Charlie'", (error, row) => {
	  printQueryResults(row); 
	});

It’s important to note that even if multiple rows match the query, db.get() will only return a single result. 

Sometimes all we need to know is whether a record matching our query exists (for instance: the code above would 
answer the question “Does Charlie own a dog?” depending on whether or not row is undefined). Sometimes we know that 
there’s only a single row because we are searching for a specific ID. And sometimes we only want an example of a row 
that would match our description. In the code above we would only print information about one dog. To accomplish 
this, we use db.get() instead of db.all().

USING PLACEHOLDERS: Sometimes we’ll want to search our database based on a user’s submission. Or we might find 
ourselves wanting to perform a series of queries looping over some external data. In those cases, we will have to 
use a placeholder. A placeholder is a part of our SQL query that we want to be interpolated with a variable’s 
contents. We want the value of the JavaScript variable to be placed within the SQL query. To do this properly, we’ll 
need to pass a particular argument to our db.run() command that will tell it how to interpolate the query.

	const furLength1 = "short";
	const furColor1 = "brown";
	 
	const findDogByFur = (length, color) => {
	  db.all(
	    "SELECT * FROM Dog WHERE fur_length = $furLength AND fur_color = $furColor", 
	    {
	      $furLength: length,
	      $furColor: color
	    }, 
	    (error, rows) => {
	      printQueryResults(rows);
	    }
	  );
	});
 
	findDogByFur(furLength1, furColor1); // prints all dogs with short brown fur.

As we can see in the example above, the power of placeholders is that we don’t need to know precisely the data we’re 
searching for at the time of writing our query. We can use these placeholders and then later, when we have values we 
want to find, we can plug them into the query. This is a highly effective tool that will allow us to harness our 
programming skills within our database queries.

USING DB.RUN(): If we INSERT a row or CREATE a TABLE we will not receive a row in response. To perform SQL commands 
that do not return rows, we use db.run() to run the command. db.run() does not return a value, but, depending on 
the SQL command, it may attach properties to the this keyword within the scope of the callback. In some cases, like 
creating a table, db.run() will not modify this. In other cases, like when INSERTing a row, a callback to db.run() 
will be able to access this.lastID, the ID of the last INSERTed row.

	const newRow = {
	  location: 'Istanbul, Turkey',
	  year: 1976,
	}
	
	db.run('INSERT INTO TemperatureData (location, year) VALUES ($location, $year)',
	{ 
	  location: newRow.location,
	  year: newRow.year
	}, 
	function(error) {
	  // handle errors here!
	  if(error) {
	    return console.log(error);
	  }

USING DB.EACH(): 

	db.each("SELECT * FROM Dog WHERE breed = 'Labrador'", 
	  (error, row) => {
	    // This gets called for every row our query returns
	    console.log(`${row.name} is a good dog`);
	  },
	  (error, numberOfRows) => {
	    // This gets called after each of our rows have been processed
	    console.log(`There were ${numberOfRows} good dogs`);
	});

In the code above we SELECT all the Labrador dogs from our Dog database. We offer affirmation to each of the 
animals individually and then announce how many received this praise in sum.

db.each() takes a query and a callback function that it performs on each row returned from the query. This is a 
useful technique for transforming or updating rows. This is also useful for memory management — we only have to 
look at one row at a time instead of trying to process every returned row at the same time. db.each() additionally 
takes an optional second callback function, which will be called when all of the queries are completed and 
processed.

CREATING A NEW TABLE: Since creating a table is another operation that does not return a row, we can use the same 
db.run() we used to INSERT rows. 

SERIAL QUERIES: We can write all of our code in nested callbacks, let’s take a look at how that might look:

	db.serialize(() =>
	{
	  db.run("DROP TABLE Dog")
	  db.run("CREATE TABLE Dog")
	  db.run("INSERT INTO Dog (breed, name, owner, fur_color, fur_length) 
	          VALUES  ('Dachshund', 'Spike', 'Elizabeth', 'Brown', 'Short')")
	});

In the previous example, we explicitly tell the database to:
- First, remove the table Dog if it exists.
- Second, create an empty table named Dog.
- Third, insert a new row into the table. In exactly that order without running any command until the previous one 
  completes.



-----LECCION 2-----
WHAT IS CRUD?
Create, Read, Update, and Delete (CRUD) are the four basic functions that models should be able to do, at most.

CREATE, READ, UPDATE AND DELETE: When we are building APIs, we want our models to provide four basic types of 
functionality. The model must be able to Create, Read, Update, and Delete resources. 

The CRUD paradigm is common in constructing web applications, because it provides a memorable framework for 
reminding developers of how to construct full, usable models. For example, let’s imagine a system to keep track of 
library books. In this hypothetical library database, we can imagine that there would be a books resource, which 
would store book objects. Let’s say that the book object looks like this:

	“book”: {
	  "id": <Integer>,
	  “title”: <String>,
	  “author”: <String>,
	  “isbn”: <Integer>
	}

To make this library system usable, we would want to make sure there were clear mechanisms for completing the CRUD 
operations:

Create — This would consist of a function which we would call when a new library book is being added to the catalog. 
The program calling the function would supply the values for “title”, “author”, and “isbn”. After this function is 
called, there should be a new entry in the books resource corresponding to this new book. Additionally, the new 
entry is assigned a unique id, which can be used to access this resource later.

Read — This would consist of a function which would be called to see all of the books currently in the catalog. It 
would simply retrieve the resource and display the results.

Update — There should be a function to call when information about a book must be changed. The program calling the 
function would supply the new values for “title”, “author”, and “isbn”. After the function call, the corresponding 
entry in the books resource would contain the new fields supplied.

Delete — There should be a function to call to remove a library book from the catalog. The program calling the 
function would supply one or more values (“title”, “author”, and/or “isbn”) to identify the book, and then this book 
would be removed from the books resource. After this function is called, the books resource should contain all of 
the books it had before, except for the one just deleted.



-----LECCION 3-----
CRUD AND REST: In a REST environment, CRUD often corresponds to the HTTP methods POST, GET, PUT, and DELETE, 
respectively. These are the fundamental elements of a persistent storage system.

CREATE: To create resources in a REST environment, we most commonly use the HTTP POST method. POST creates a new 
resource of the specified resource type.
For example, let’s imagine that we are adding a new food item to the stored list of dishes for this restaurant, and 
the dish objects are stored in a dishes resource. If we wanted to create the new item, we would use a POST request:

Request:
	POST http://www.myrestaurant.com/dishes/

Body -
	{
	  "dish": {
	    "name": “Avocado Toast”,
	    "price": 8
	  }
	}

This creates a new item with a name value of “Avocado Toast” and a price value of 8. Upon successful creation, the 
server should return a header with a link to the newly-created resource, along with a HTTP response code of 201 
(CREATED).

Response:
	Status Code - 201 (CREATED)

Body -
	{
	  "dish": {
	    "id": 1223,
	    "name": “Avocado Toast”,
	    "price": 8
	  }
	}

From this response, we see that the dish with name “Avocado Toast” and price 8 has been successfully created and 
added to the dishes resource.

READ: To read resources in a REST environment, we use the GET method. Reading a resource should never change any 
information - it should only retrieve it. If you call GET on the same information 10 times in a row, you should get 
the same response on the first call that you get on the last call.

GET can be used to read an entire list of items:

Request:
	GET http://www.myrestaurant.com/dishes/

Response: Status Code - 200 (OK)

Body -
	{
	  "dishes": [
	    {
	      "id": 1,
	      "name": “Spring Rolls”,
	      "price": 6
	    },
	    ...
	    {
	      "id": 1223,
	      "name": “Avocado Toast”,
	      "price": 8
	    }
	  ]
	}
GET requests can also be used to read a specific item, when its id is specified in the request:

Request:
	GET http://www.myrestaurant.com/dishes/1223

Response: Status Code - 200 (OK)

Body -
	{
	  "id": 1223,
	  "name": “Avocado Toast”,
	  "price": 8
	}
After this request, no information has been changed in the database. The item with id 1223 has been 	
retrieved from the dishes resource, and not modified. When there are no errors, GET will return the HTML or JSON of 
the desired resource, along with a 200 (OK) response code. If there is an error, it most often will return a 404 
(NOT FOUND) response code.

UPDATE: PUT is the HTTP method used for the CRUD operation, Update.
For example, if the price of Avocado Toast has gone up, we should go into the database and update that information. 
We can do this with a PUT request.

Request:
	PUT http://www.myrestaurant.com/dishes/1223

Body -
	{
	  "dish": {
	    "name": “Avocado Toast”,
	    "price": 10
	  }
	}
This request should change the item with id 1223 to have the attributes supplied in the request body. This dish with 
id 1223 should now still have the name “Avocado Toast”, but the price value should now be 10, whereas before it was 
8.

Response: Status Code - 200 (OK)

Body -
	{
	  "dish": {
	    "name": “Avocado Toast”,
	    "price": 10
	  }
	}
The response includes a Status Code of 200 (OK) to signify that the operation was successful. Optionally, the 
response could use a Status Code of 204 (NO CONTENT) and not include a response body. This decision depends on the 
context.

DELETE: The CRUD operation Delete corresponds to the HTTP method DELETE. It is used to remove a resource from the 
system.

Let’s say that the world avocado shortage has reached a critical point, and we can no longer afford to serve this 
modern delicacy at all. We should go into the database and delete the item that corresponds to “Avocado Toast”, 
which we know has an id of 1223.

Request:
	DELETE http://www.myrestaurant.com/dishes/1223

Such a call, if successful, returns a response code of 204 (NO CONTENT), with no response body. The dishes resource 
should no longer contain the dish object with id 1223.

Response: Status Code - 204 (NO CONTENT)

Body - None

Calling GET on the dishes resource after this DELETE call would return the original list of dishes with the {"id": 
1223, "name": “Avocado Toast”, "price": 10} entry removed. All other dish objects in the dishes resource should 
remain unchanged. If we tried to call a GET on the item with id 1223, which we just deleted, we would receive a 404 
(NOT FOUND) response code and the state of the system should remain unchanged.

Calling DELETE on a resource that does not exist should not change the state of the system. The call should return a 
404 response code (NOT FOUND) and do nothing.




