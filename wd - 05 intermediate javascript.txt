WEB DEVELOPMENT CODECADEMY:

-----LECCION 1----- 
MODULES
INTRO TO RUNTIME ENVIROMENTS: A runtime environment is where your program will be executed. It determines what 
global objects your program can access and it can also impact how it runs.
There are runtime environments like:
- the runtime environment of a browser (like Chrome, or Firefox)
- the Node runtime environment

A BROWSER'S RUNTIME ENVIRONMENT: The most common place where JavaScript code is executed is in a browser. For example, 
using any text editor, u could create a file on your computer called my_website.html and put the following code:
<!-- my_website.html -->
<html>
  <body>
    <h1> My Website </h1>
    <script> window.alert('Hello World'); </script>
  </body>
</html>

Most browsers will allow you to load websites that you have created locally by going to the menu 
File > Open File > my_website.html.

Upon loading, the embedded <script></script> will execute and the window.alert() method will create a pop-up box in 
your browser with the text "Hello World". How is this possible?
The answer is that you are executing this code in the browser’s runtime environment. The window.alert() method is 
built into this environment and any program executed in a browser has access to this method. In fact, the window 
object provides access to a huge amount of data and functionality relating to the open browser window beyond 
just .alert().

Applications created for and executed in the browser are known as front-end applications. For a long time, JavaScript 
code could only be executed in a browser and was used exclusively for creating front-end applications. In order to 
create back-end applications that could run on a computer WITHOUT a browser, you would need to use other programming 
languages such as Java or PHP.

NODE RUNTIME ENVIRONMENT: The Node runtime environment was created for the purpose of executing JavaScript code 
without a browser, thus enabling programmers to create full-stack (front-end and back-end) applications using only 
the JavaScript language.

Functions, like window.alert(), can’t be used. Instead, the Node runtime environment gives back-end applications 
access to a variety of features unavailable in a browser, such as access to the server’s file system, database, and 
network. For example, suppose you created a file called my-app.js. We can check to see the directory that this file 
is located in using the Node runtime environment variable process:
	// my-app.js
	console.log(process.env.PWD);

Notice that we are using console.log now instead of window.alert() since the window object isn’t available.
process is an object containing data relating to the JavaScript file being executed. process.env is an object 
containing environment variables such as process.env.PWD which contains the current working directory (and stands 
for “Print Working Directory”).

To execute the JavaScript code in this file, first make sure that you have set up Node on your computer. Then, 
open up a terminal and run the following command:
	$ node my-app.js
	/path/to/working/directory

The node command tells your computer to execute the my-app.js file in the Node environment. You can also use the 
node command without a file argument to open up the Node Read-Eval-Print-Loop (REPL):
	$ node
	> process.env.HOME
	'/home/ccuser'

SUMMARY (FRONT-END vs BACK-END): 
- Front-end JavaScript applications are executed in a browser’s runtime environment and have access to 
  the window object.
- Back-end JavaScript applications are executed in the Node runtime environment and have access to the 
  file system, databases, and networks attached to the server.


-----LECCION 2----- 
IMPLEMENTING MODULES IN NODE
WHAT ARE MODULES?: Modules are reusable pieces of code in a file that can be exported and then imported for use 
in another file. A modular program is one whose components can be separated, used individually, and recombined to 
create a complex system.

This modular strategy is sometimes called separation of concerns and is useful for several reasons. For example:
- find, fix, and debug code more easily.
- keep information private and protected from other modules.
- prevent pollution of the global namespace and potential naming collisions.

NODE.JS VS ES6: There are multiple ways of implementing modules depending on the runtime environment in which your 
code is executed. In JavaScript, there are two runtime environments and each has a preferred module implementation:
- The Node runtime environment and the module.exports and require() syntax.
- The browser’s runtime environment and the ES6 import/export syntax.

IMPLEMENTING THEM IN NODE: Every JS file that runs in a Node environment is treated as a distinct module. The 
functions and data defined within each module can be used by any other module, as long as those resources are 
properly exported and imported.

Imagine we have two programs, *water-limits.js* and *celsius-to-fahrenheit.js*. Both programs implement the function 
celsiusToFahrenheit(). Not only did we write this function twice, but if we ever need to make changes to the function 
we’ll also have to make those changes in two places. 
Creating a module that exports a celsiusToFahrenheit() function that can be used by both of these programs would 
solve this repetitive code problem.

MODULE.EXPORTS: To create a module, you simply have to create a new file where the functions can be declared. Then, 
to make these functions available to other files, add them as properties to the built-in *module.exports* object:

/* converters.js */
function celsiusToFahrenheit(celsius) {                      (1)
  return celsius * (9/5) + 32;                               (2)
}                                                            (3)
                                                             (4)
module.exports.celsiusToFahrenheit = celsiusToFahrenheit;    (5)
                            				     (6)
module.exports.fahrenheitToCelsius = function(fahrenheit) {  (7)
  return (fahrenheit - 32) * (5/9);			     (8)
};							     (9)

The code above demonstrates two ways of exporting functions from a module:
- In the fifth line of code, the first approach for exporting a function is shown. The already-defined function 
  celsiusToFahrenheit() is assigned to module.exports.celsiusToFahrenheit.
- Below, an alternative approach for exporting a function from a module is shown. A new function expression is 
  declared and assigned to module.exports.fahrenheitToCelsius. 

module.exports is an object that is built-in to the Node.js runtime environment. Other files can now import this 
object, and make use of these two functions, with another feature that is built-in to the Node.js runtime 
environment: the require() function.

REQUIRE(): The require() function accepts a string as an argument. That string provides the file path to the module 
you would like to import.

Let’s update water-limits.js such that it uses require() to import the .celsiusToFahrenheit() method from the 
module.exports object within converters.js:

/* water-limits.js */
const converters = require('./converters.js'); 
 
const freezingPointF = converters.celsiusToFahrenheit(0); 	//0 = freezingPointCelsius
const boilingPointF = converters.celsiusToFahrenheit(100); 	//100 = boilingPointCelsius
 
console.log(`The freezing point of water in Fahrenheit is ${freezingPointF}`);
console.log(`The boiling point of water in Fahrenheit is ${boilingPointF}`);

When you use require(), the entire module.exports object is returned and stored in the variable converters. 
This means that both the .celsiusToFahrenheit() and .fahrenheitToCelsius() methods can be used in this program!

USING OBJECT DESTRUCTURING TO BE MORE SELECTIVE WITH REQUIRE(): In many cases, modules will export a large number 
of functions but only one or two of them are needed. You can use object destructuring to extract only the 
needed functions.

Let’s update celsius-to-fahrenheit.js and only extract the .celsiusToFahrenheit() method, leaving 
.fahrenheitToCelsius() behind:
In the console:
	$ node celsius-to-fahrenheit.js 100 (aca esta el process)
	100 degrees Celsius = 212 degrees Fahrenheit (devuelve esto)

In JS: 
	/* celsius-to-fahrenheit.js */
	const { celsiusToFahrenheit } = require('./converters.js');
 
	const celsiusInput = process.argv[2]; 
	const fahrenheitValue = celsiusToFahrenheit(celsiusInput);
 
	console.log(`${celsiusInput} degrees Celsius = ${fahrenheitValue} degrees Fahrenheit`);

celsiusInput is assigned process.argv[2]. When a program is executed in the Node environment, process.argv is an 
array holding the arguments provided. In this case, it looks like ['node', 'celsius-to-fahrenheit.js', '100']. 
So, process.argv[2] returns 100.


-----LECCION 2----- 
IMPLEMENTING MODULES - ES6 SYNTAX
BRIEF HISTOYRY OF JAVASCRIPT MODULES IN THE BROWSER: The average size of a website, in terms of kilobytes of 
JavaScript data transferred, has grown over 5 times from 2010 to 2020! This data is to make clear the need for 
modularity as the capabilities, and size, of these scripts grow.

E6S NAMED EXPORT SYNTAX: A module must be entirely contained within a file. So, let’s first consider where a new 
module may be placed within the file system. Since it needs to be used by both of these projects, you may want to 
put it in a mutually accessible location. The entire file structure containing both projects and this new module, 
let’s call it **dom-functions.js**, could look like this:
Files:
	secret-image/
	|-- secret-image.html
	|-- secret-image.js
	secret-messages/
	|-- secret-messages.html
	|-- secret-messages.js
	modules/ (CARPETA DONDE ESTARAN LOS MODULOS)
	|-- dom-functions.js    <-- new module file

Inside dom-functions.js, the functions you wish to reuse can be exported using the named export syntax below:
	export { resourceToExportA, resourceToExportB, ...}

Below, you can see how this is implemented in the new module file dom-functions.js:
/* dom-functions.js */
const toggleHiddenElement = (domElement) => {
    if (domElement.style.display === 'none') {
      domElement.style.display = 'block';
    } else {
      domElement.style.display = 'none';
    }
}
 
const changeToFunkyColor = (domElement) => {
  const r = Math.random() * 255;
  const g = Math.random() * 255;
  const b = Math.random() * 255;
 
  domElement.style.background = `rgb(${r}, ${g}, ${b})`;
}
 
export { toggleHiddenElement, changeToFunkyColor }; <---------- (ES6 export statement)

These exported functions are now available to be imported and used by other JS files!

INDIVIDUAL EXPORT: In addition to the syntax above, in which all named exports are listed together, individual 
values may be exported as named exports by simply placing the export keyword in front of the variable’s declaration. 
Here is the same example using this syntax:

/* dom-functions.js */
export const toggleHiddenElement = (domElement) => {
  // logic omitted...
}
 
export const changeToFunkyColor = (domElement) => {
  // logic omitted...
}

HOW TO CREATE A LOCAL SERVER WITH VS CODE: 
https://www.codecademy.com/articles/spinning-up-a-local-server

ES6 IMPORT SYNTAX: The ES6 syntax for importing named resources from modules is similar to the export syntax:
	import { exportedResourceA, exportedResourceB } from '/path/to/module.js';

Let’s update the secret-messages program such that it now imports functionality from dom-functions.js:

/* secret-messages.js */
import { toggleHiddenElement, changeToFunkyColor } from '../modules/dom-functions.js';
 
const buttonElement = document.getElementById('secret-button');
const pElement = document.getElementById('secret-p');
 
buttonElement.addEventListener('click', () => {
  toggleHiddenElement(pElement);     <-------------
  changeToFunkyColor(buttonElement); <-------------
});

Now, you must also update secret-messages.html:
(last sentence in the <body> element)
	<script type="module" src="./secret-messages.js"> </script>

Not putting type="module" to the <script> element can cause some browsers to throw an error. 

RENAMNIG IMPORTS TO AVOID NAMING COLLISIONS: suppose you had access to two modules, greeterEspanol.js and 
greeterFrancais.js. Each exports a function called greet():

/* inside greeterEspanol.js */
const greet = () => {
  console.log('hola');
}
export { greet };
 
/* inside greeterFrancais.js */
const greet = () => {
  console.log('bonjour');
}
export { greet };

Now, let’s say you wanted to use each of these functions in a program, called main.js, that simulates a conversation 
between a spanish-speaker and a french-speaker.
	import { greet } from 'greeterEspanol.js';
	import { greet } from 'greeterFrancais.js';

The code above will throw an error on line 2 due to the fact that the identifier greet has already been defined on 
line 1. Thankfully, ES6 includes syntax for renaming imported resources by adding in the keyword **as**. 
It looks like this:
/* main.js */
import { greet as greetEspanol } from 'greeterEspanol.js';
import { greet as greetFrancais } from 'greeterFrancais.js';
 
greetEspanol(); // Prints: hola
greetFrancais(); // Prints: bonjour

DEFAULT EXPORTS AND IMPORTS: Every module also has the option to export a single value to represent the entire 
module called the default export. Often, though not always, the default export value is an object containing the 
entire set of functions and/or data values of a module.
The syntax for exporting a default object looks like this:

const resources = { 
  valueA, 
  valueB 
}
export { resources as default };

At first glance, it looks like the resources object is being exported as a named export. However, the clause as 
default renames the exported object to default, a reserved identifier that can only be given to a single exported 
value.

You may also see this shorthand syntax where the value that follows 'export default' is the default value 
to be exported:

const resources = {
  valueA,
  valueB
}
export default resources;

IMPORTING DEFAULT VALUES: The syntax for importing default exports looks like this:
	import importedResources from 'module.js';

This syntax is actually shorthand for 'import { default as importedResources } from 'module.js' and the imported 
'default' value may be given any name the programmer chooses.

It should be noted that if the default export is an object, the values inside cannot be extracted until after 
the object is imported, like so:

// This will work...
import resources from 'module.js'
const { valueA, valueB } = resources;
 
// This will not work...
import { valueA, valueB } from 'module.js'

The dom-functions.js module from above could be rewritten to use default exports like so:
	export default resources;
This default exports object can now be used within secret-messages.js like so:
	import domFunctions from '../modules/dom-functions.js';
	const { toggleHiddenElement, changeToFunkyColor } = domFunctions;

Notice how toggleHiddenElement() and changeToFunkyColor() are now methods of the imported object called 
'domFunctions' and are extracted using ES6 destructuring syntax!


-----LECCION 3----- 
ERRORS
ERROR STACK TRACES: A piece of software, called a compiler, is trying to translate your code so that your computer 
can understand and run it. However, the compiler is coming across a piece of code that it can’t interpret. As a 
result, it throws an error back to you to let you know that it has to stop and why.
This information is logged as an error stack trace — a printed message containing information about where the error 
occurred, what type of error was thrown, and a description of the error.

JAVASCRIPT ERROR TYPES: Here are three common error types:
- SyntaxError: This error will be thrown when a typo creates invalid code — code that cannot be interpreted by the 
      compiler. When this error is thrown, scan your code to make sure you properly opened and closed all brackets, 
      braces, and parentheses and that you didn’t include any invalid semicolons.
- ReferenceError: This error will be thrown if you try to use a variable that does not exist. When this error is 
      thrown, make sure all variables are properly declared.
- TypeError: This error will be thrown if you attempt to perform an operation on a value of the wrong type. For 
      example, if we tried to use a string method on a number, it would throw a TypeError.

There are seven types of built-in JavaScript errors in total. You can find more information about all of them at the 
MDN JavaScript Error documentation: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error

LOCATING SILENT BUGS: Even if your code runs error-free, it is not necessarily bug-free. You may find that your 
code is consistently returning incorrect values without throwing any errors. 

An incredibly powerful tool for locating bugs is a method you likely learned very early on in your JavaScript 
journey: **console.log()**! By adding print statements to our code, we can identify where things have gone wrong.

DEBUGGING WIH CONSOLE.LOG(): 
1. Go to the beginning of the malfunctioning code. Print out all starting variables, existing values, and arguments 
   using console.log(). If the values are what you expect, move on to the next piece of logic in the code. If not, 
   you have identified a bug and should skip to step 3.
2. After the next piece of logic in your code, add console.log() statements to ensure updated variables have the 
   values that you now expect and that the block of code is being executed. If that logic is executing properly, 
   continue repeating this step until you find a line not working as expected, then move to step 3.
3. Fix the identified bug and run your code again. If it now works as expected, you’ve finished debugging! If not, 
   continue stepping through your code using step 2 until it does.


-----LECCION 4----- 
ERROR HANDLING
CONSTRUCTING AN ERROR: What if we need an error message that isn’t covered by the built-in errors? Let’s say we 
need to inform a user that a string passed in as an argument is too short with a custom message. Such a message 
isn’t covered by a built-in error, but we could use the Error function to make our own error object with a message 
that is unique to our program!

console.log(Error('Your password is too weak.'));
// Prints: Error: Your password is too weak.

You might also see errors created with the new keyword. Both methods will lead to the same functionality:
console.log(new Error('Your password is too weak.'));
// Prints: Error: Your password is too weak.

THE THROW ERROR: Creating an error doesn’t cause our program to stop — remember, an error must be thrown for it to 
halt the program. To throw an error in JavaScript, we use the throw keyword like so:
	throw Error('Something wrong happened');
	// Error: Something wrong happened

When we use the throw keyword, the error is thrown and code after throw statement will not execute. For example:
	throw Error('Something wrong happened');
	// Error: Something wrong happened
 
	console.log('This will never run');

THE TRY...CATCH STATEMENT: We have the ability to anticipate and handle these errors by writing code to address 
the error and allow our program to continue running. In JavaScript, we use try...catch statement to anticipate and 
handle errors. Take a look at example below:

try {
  throw Error('This error will get caught');
} catch (e) {
  console.log(e);
}
// Prints: This error will get caught
 
console.log('The thrown error that was caught in the try...catch statement!');
// Prints: 'The thrown error that was caught in the try...catch statement!'


Now, let’s break down what happened in the try...catch statement above:
1. We have code that follows try inside curly braces {} known as the try block.
2. Inside the try block we insert code that we anticipate might throw an error.
3. Since we want to see what happens if an error is thrown in the try block, we throw an error with the message 
   'This error will get caught'.
4. Following the try block is the catch statement which accepts the thrown error from the try block . The 'e' 
   represents the thrown error.
5. The curly braces that follow catch(e) is known as the catch block and contains code that executes to handle 
   the error.
6. Since the error is caught, our console.log() after the try...catch statement prints 'The thrown error that was 
   caught in the try...catch statement!'.

Generally speaking, in a try...catch statement, we evaluate code in the try block and if the code throws an error, 
the code inside the catch block will handle the error for us.

HANDLING WITH TRY...CATCH: In the previous exercise we caught an error that we threw, but we can also use a 
try...catch statement to handle built-in errors that are thrown by the JavaScript engine that is reading and 
evaluating our code.

const someVar = 'Cannot be reassigned';
try {
  someVar = 'Still going to try';
} catch(e) {
  console.log(e);
}
// Prints: TypeError: Assignment to constant variable.

In the example above, we didn’t use the throw keyword to throw a custom error, rather we tried to re-assign a const 
variable and a TypeError was thrown. Then, in our catch block, we logged the error to the console.

Using a try...catch statement for built-in JavaScript errors is really beneficial when we need to use data from an 
external source that’s not written directly in our program.

Let’s say we expect to grab an array from a database but the information we get back is a string. In our program, 
we could have a function that only works on arrays. If that function was called with a string instead of an array 
we would get an error and our program would stop running!

However, we can use a try...catch statement to handle the thrown error for us which allows our program to continue 
running and we receive a message knowing what went wrong! Let’s see how we can implement this in our code.
