WEB DEVELOPMENT CODECADEMY

-----LECCION 1----- 
INTRO TO JSX: JSX is a syntax extension for JavaScript. It was written to be used with React. JSX code looks a lot
like HTML.

What does “syntax extension” mean?

In this case, it means that JSX is not valid JavaScript. Web browsers can’t read it!

If a JavaScript file contains JSX code, then that file will have to be compiled. That means that before the file
reaches a web browser, a JSX compiler will translate any JSX into regular JavaScript.

EJ: const h1 = <h1>Hello world</h1>;  // This JSX element looks exactly like HTML!

JSX ELEMENTS AND THEIR SURROUNDINGS: A JSX element can be saved in a variable, passed to a function, stored in an
object or array… you name it.

Here’s an example of several JSX elements being stored in an object:

const myTeam = {
  center: <li>Benzo Walli</li>,
  powerForward: <li>Rasha Loa</li>,
  smallForward: <li>Tayshaun Dasmoto</li>,
  shootingGuard: <li>Colmar Cumberbatch</li>,
  pointGuard: <li>Femi Billon</li>
};

ATTRIBUTES IN JSX: A single JSX element can have many attributes, just like in HTML:
const panda = <img src='images/panda.jpg' alt='panda' width='500px' height='500px' />;

NESTED JSX: You can nest JSX elements inside of other JSX elements, just like in HTML.
If a JSX expression takes up more than one line, then you must wrap the multi-line JSX expression in parentheses. 
This looks strange at first, but you get used to it.

Nested JSX expressions can be saved as variables, passed to functions, etc., just like non-nested JSX expressions 
can! Here’s an example of a nested JSX expression being saved as a variable:
 const theExample = (
   <a href="https://www.example.com">
     <h1>
       Click me!
     </h1>
   </a>
 );
 
JSX OUTER ELEMENTS: There’s a rule that we haven’t mentioned: a JSX expression must have exactly one outermost
element. In other words, this code will work:
const paragraphs = (
  <div id="i-am-the-outermost-element">
    <p>I am a paragraph.</p>
    <p>I, too, am a paragraph.</p>
  </div>
);

But this code will not work:
const paragraphs = (
  <p>I am a paragraph.</p> 
  <p>I, too, am a paragraph.</p>
);

The first opening tag and the final closing tag of a JSX expression must belong to the same JSX element!
 
RENDERING JSX: To render a JSX expression means to make it appear onscreen.
The following code will render a JSX expression:
ReactDOM.render(<h1>Hello world</h1>, document.getElementById('app'));
 
THE ReactDOM.render() FUNCTION: ReactDOM is the name of a JavaScript library. This library contains several 
React-specific methods, all of which deal with the DOM in some way or another.
Move slightly to the right, and you can see one of ReactDOM‘s methods: ReactDOM.render().

ReactDOM.render() is the most common way to render JSX. It takes a JSX expression, creates a corresponding tree of
DOM nodes, and adds that tree to the DOM. That is the way to make a JSX expression appear onscreen.
 
<h1>Hello world</h1> is the first argument being passed. ReactDOM.render()‘s first argument should be a JSX expression, and it will be rendered to the screen.
 
Move to the right a little more, and you will see this expression: document.getElementById('app'). 
You just learned that ReactDOM.render() makes its first argument appear onscreen. But where on the screen should
that first argument appear? The first argument is appended to whatever element is selected by the second argument.

On index.html, the element that acted as a container for ReactDOM.render()‘s first argument is the first header!
<main id="app">
  <h1>Render me!</h1>
</main>

PASSING A VARIABLE TO ReactDOM.render(): The first argument could also be a variable, so long as that variable
evaluates to a JSX expression.

const toDoList = (
  <ol>
    <li>Learn React</li>
    <li>Become a Developer</li>
  </ol>
);
 
ReactDOM.render(
  toDoList, 
  document.getElementById('app')
);


THE VIRTUAL DOM: One special thing about ReactDOM.render() is that it only updates DOM elements that have changed.
That means that if you render the exact same thing twice in a row, the second render will do nothing.
https://www.codecademy.com/articles/react-virtual-dom
 

-----LECCION 2----- 





 
