WEB DEVELOPMENT CODECADEMY

-----LECCION 1----- 
INTRO TO JSX: JSX is a syntax extension for JavaScript. It was written to be used with React. JSX code looks a lot
like HTML.

What does “syntax extension” mean?

In this case, it means that JSX is not valid JavaScript. Web browsers can’t read it!

If a JavaScript file contains JSX code, then that file will have to be compiled. That means that before the file
reaches a web browser, a JSX compiler will translate any JSX into regular JavaScript.

EJ: const h1 = <h1>Hello world</h1>;  // This JSX element looks exactly like HTML!

JSX ELEMENTS AND THEIR SURROUNDINGS: A JSX element can be saved in a variable, passed to a function, stored in an
object or array… you name it.

Here’s an example of several JSX elements being stored in an object:

const myTeam = {
  center: <li>Benzo Walli</li>,
  powerForward: <li>Rasha Loa</li>,
  smallForward: <li>Tayshaun Dasmoto</li>,
  shootingGuard: <li>Colmar Cumberbatch</li>,
  pointGuard: <li>Femi Billon</li>
};

ATTRIBUTES IN JSX: A single JSX element can have many attributes, just like in HTML:
const panda = <img src='images/panda.jpg' alt='panda' width='500px' height='500px' />;

NESTED JSX: You can nest JSX elements inside of other JSX elements, just like in HTML.
If a JSX expression takes up more than one line, then you must wrap the multi-line JSX expression in parentheses. 
This looks strange at first, but you get used to it.

Nested JSX expressions can be saved as variables, passed to functions, etc., just like non-nested JSX expressions 
can! Here’s an example of a nested JSX expression being saved as a variable:
 const theExample = (
   <a href="https://www.example.com">
     <h1>
       Click me!
     </h1>
   </a>
 );
 
JSX OUTER ELEMENTS: There’s a rule that we haven’t mentioned: a JSX expression must have exactly one outermost
element. In other words, this code will work:
const paragraphs = (
  <div id="i-am-the-outermost-element">
    <p>I am a paragraph.</p>
    <p>I, too, am a paragraph.</p>
  </div>
);

But this code will not work:
const paragraphs = (
  <p>I am a paragraph.</p> 
  <p>I, too, am a paragraph.</p>
);

The first opening tag and the final closing tag of a JSX expression must belong to the same JSX element!
 
RENDERING JSX: To render a JSX expression means to make it appear onscreen.
The following code will render a JSX expression:
ReactDOM.render(<h1>Hello world</h1>, document.getElementById('app'));
 
THE ReactDOM.render() FUNCTION: ReactDOM is the name of a JavaScript library. This library contains several 
React-specific methods, all of which deal with the DOM in some way or another.
Move slightly to the right, and you can see one of ReactDOM‘s methods: ReactDOM.render().

ReactDOM.render() is the most common way to render JSX. It takes a JSX expression, creates a corresponding tree of
DOM nodes, and adds that tree to the DOM. That is the way to make a JSX expression appear onscreen.
 
<h1>Hello world</h1> is the first argument being passed. ReactDOM.render()‘s first argument should be a JSX expression, and it will be rendered to the screen.
 
Move to the right a little more, and you will see this expression: document.getElementById('app'). 
You just learned that ReactDOM.render() makes its first argument appear onscreen. But where on the screen should
that first argument appear? The first argument is appended to whatever element is selected by the second argument.

On index.html, the element that acted as a container for ReactDOM.render()‘s first argument is the first header!
<main id="app">
  <h1>Render me!</h1>
</main>

PASSING A VARIABLE TO ReactDOM.render(): The first argument could also be a variable, so long as that variable
evaluates to a JSX expression.

const toDoList = (
  <ol>
    <li>Learn React</li>
    <li>Become a Developer</li>
  </ol>
);
 
ReactDOM.render(
  toDoList, 
  document.getElementById('app')
);


THE VIRTUAL DOM: One special thing about ReactDOM.render() is that it only updates DOM elements that have changed.
That means that if you render the exact same thing twice in a row, the second render will do nothing.
https://www.codecademy.com/articles/react-virtual-dom
 

-----LECCION 2----- 
ADVANCED JSX: In HTML, it’s common to use class as an attribute name: <h1 class="big">Hey</h1>
In JSX, you can’t use the word class! You have to use className instead: <h1 className="big">Hey</h1>
This is because JSX gets translated into JavaScript, and class is a reserved word in JavaScript.

SELF CLOSING TAGS: When you write a self-closing tag in HTML, it is optional to include a forward-slash immediately
before the final angle-bracket. In JSX, you have to include the slash. If you write a self-closing tag in JSX and
forget the slash, you will raise an error.
Fine in JSX: <br />  |  NOT FINE AT ALL in JSX: <br>

CURLY BRACES IN JSX: Any code in between the tags of a JSX element will be read as JSX, not as regular JavaScript!
JSX doesn’t add numbers - it reads them as text, just like HTML.

You need a way to write code that says, “Even though I am located in between JSX tags, treat me like ordinary
JavaScript and not like JSX.” You can do this by wrapping your code in curly braces.

VARIABLES IN JSX: You can access variables while inside of a JSX expression, even if those variables were declared
on the outside.
EJ: 
const **name** = 'Gerdo';
 
const greeting = <p>Hello, {**name**}!</p>;

VARIABLES ATTRIBUTES IN JSX: When writing JSX, it’s common to use variables to set attributes.

EJ: 
const **sideLength** = "200px";
 
const panda = (
  <img 
    src="images/panda.jpg" 
    alt="panda" 
    height={**sideLength**} 
    width={**sideLength**} />
);

EVENT LISTENERS ON JSX: Programming in React means constantly working with event listeners.

You create an event listener by giving a JSX element a special attribute. Here’s an example:
<img onClick={**myFunc**} />

IFS DON'T WORK ON JSX: The reason why has to do with the way that JSX is compiled. 
You can learn more here: https://reactjs.org/docs/jsx-in-depth.html

JSX CONDITIONALS: IF STATEMENTS THAT DO WORK: How can you write a conditional, if you can’t inject an if statement
into JSX? Well, one option is to write an if statement, and not inject it into JSX.

JSX CONDITIONALS: THE TERNARY OPERATOR: you write x ? y : z, where x, y, and z are all JavaScript expressions. 
When your code is executed, x is evaluated as either “truthy” or “falsy.” If x is truthy, then the entire ternary
operator returns y. If x is falsy, then the entire ternary operator returns z.

Here’s how you might use the ternary operator in a JSX expression:
const headline = (
  <h1>
    { age >= drinkingAge ? 'Buy Drink' : 'Do Teen Stuff' }
  </h1>
);

JSX CONDITIONALS: &&: It works best in conditionals that will sometimes do an action, but other times do nothing at
all.
EJ:
const tasty = (
  <ul>
    <li>Applesauce</li>
    { !baby && <li>Pizza</li> }
    { age > 15 && <li>Brussels Sprouts</li> }
    { age > 20 && <li>Oysters</li> }
    { age > 25 && <li>Grappa</li> }
  </ul>
);

If the expression on the left of the && evaluates as true, then the JSX on the right of the && will be rendered. 
If the first expression is false, however, then the JSX to the right of the && will be ignored and not rendered.

KEYS: When you make a list in JSX, sometimes your list will need to include something called keys:
<ul>
  <li key="li-01">Example1</li>
  <li key="li-02">Example2</li>
  <li key="li-03">Example3</li>
</ul>

keys don’t do anything that you can see! React uses them internally to keep track of lists. If you don’t use keys when you’re supposed to, React might accidentally scramble your list-items into the wrong order.

Not all lists need to have keys. A list needs keys if either of the following are true:
 1. The list-items have memory from one render to the next. For instance, when a to-do list renders, each item 
    must “remember” whether it was checked off. The items shouldn’t get amnesia when they render.
 2. A list’s order might be shuffled. For instance, a list of search results might be shuffled from one render 
    to the next.

THE React.createElement METHOD: You can write React code without using JSX at all.
From: const h1 = <h1>Hello world</h1>;
To: const h1 = React.createElement(
      "h1",
      null,
      "Hello, world"
    );



-----LECCION 3-----
REACT COMPONENTS: A component is a small, reusable chunk of code that is responsible for one job. That job is 
often to render some HTML.

IMPORT ReactDOM: The methods imported from 'react-dom' are meant for interacting with the DOM. You are already 
familiar with one of them: ReactDOM.render().

The methods imported from 'react' don’t deal with the DOM at all. They don’t engage directly with anything that 
isn’t part of React.

To clarify: the DOM is used in React applications, but it isn’t part of React. After all, the DOM is also used in 
countless non-React applications. Methods imported from 'react' are only for pure React purposes, such as creating 
components or writing JSX elements. 

CREATE A COMPONENT CLASS: We can use a JavaScript class to define a new React component. After we define our class 
component, we can use it to render as many instances of that component as we want. A component class is more like a 
factory that produces components. When you start making components, each one will come from a component class.
React.Component is a JavaScript class. To create your own component class, you must subclass React.Component. You 
can do this by using the syntax class YourComponentNameGoesHere extends React.Component {}.

Component class variable names must begin with capital letters!
EJ:
class MyComponentClass extends React.Component {
  render() {
    return <h1>Hello world</h1>;
  }
}

COMPONENT CLASS INSTRUCTIONS (BODY): Like all JavaScript classes, this one needs a body. The body will act as a set 
of instructions, explaining to your component class how it should build a React component.

There is only one property that you have to include in your instructions: a render method.

A render method is a property whose name is render, and whose value is a function. The term “render method” can refer to the entire property, or to just the function part.

A render method must contain a return statement. Usually, this return statement returns a JSX expression:

class ComponentFactory extends React.Component {
  render() {
    return <h1>Hello world</h1>;
  }
}

COMPONENT INSTANCE: To make a React component, you write a JSX element. Instead of naming your JSX element 
something like h1 or div like you’ve done before, give it the same name as a component class. Voilà, there’s your 
component instance! 		EJ: 	<MyComponentClass />

JSX elements can be either HTML-like, or component instances. JSX uses capitalization to distinguish between the 
two! That is the React-specific reason why component class names must begin with capital letters.

RENDER A COMPONENT: Whenever you make a component, that component inherits all of the methods of its component 
class. MyComponentClass has one method: MyComponentClass.render(). Therefore, <MyComponentClass /> also has a 
method named render.
You could make a million different <MyComponentClass /> instances, and each one would inherit this same exact render method.
In order to render a component, that component needs to have a method named render. Your component has this!

ReactDOM.render(
  <MyComponentClass />,
  document.getElementById('app')
);



-----LECCION 4-----
ADVANCED JSX & COMPONENTS
TRANSFORMING A MULTILINE JSX INTO A COMPONENT: The key thing to notice in QuoteMaker is the parentheses in 
the return statement

class QuoteMaker extends React.Component {
  render() {
    return (	<-- ACA!!!
      <blockquote>
        <p>
          The world is full of objects, more or less interesting; I do not wish to add any more.
        </p>
        <cite>
          <a target="_blank"
            href="https://en.wikipedia.org/wiki/Douglas_Huebler">
            Douglas Huebler
          </a>
        </cite>
      </blockquote>
    );	<-- ACA TERMINA!!!
  }
};

VARIABLE ATTRIBUTE (FROM AN OBJECT) IN A COMPONENT: 
From redPanda object: 
	const redPanda = {
  	  src: 'https://upload.wikimedia.org/wikipedia/commons/b/b2/Endangered_Red_Panda.jpg',	<-- ACA!!!
  	  alt: 'Red Panda',	<-- ACA!!!
  	  width: '200px	<-- ACA!!!
	};

To RedPanda component: 
	class RedPanda extends React.Component {
	  render() {
	    return (
	      <div>
	        <h1>Cute Red Panda</h1>
	        <img 
	          src={redPanda.src}	<-- ACA!!!
	          alt={redPanda.alt}	<-- ACA!!!	
	          width={redPanda.width} />	<-- ACA!!!
	      </div>
	    );
	  }
	}

LOGIC IN A RENDER FUNCTION: 
class Random extends React.Component {
  render() {
    // First, some logic that must happen before rendering:
    const n = Math.floor(Math.random() * 10 + 1); <-- ACA!!!
    // Next, a return statement using that logic:
    return <h1>The number is {n}!</h1>;
  }
}



-----LECCION 5-----
REACT SETUP AND RAVENOUS

https://www.codecademy.com/paths/web-development/tracks/front-end-applications-with-react/modules/react-development-setup-and-ravenous-part-1/articles/how-to-create-a-react-app

CREATING A REACT APP: We will be using the Node package manager (npm), so you will need to have Node installed on 
your computer. When you install Node, you automatically get npm installed on your computer as well. 
To upgrade to the latest version of npm on Linux, you can run this command in your terminal:
	sudo npm install -g npm@latest

SETTING UP THE BOILERPLATE APPLICATION: It is possible to manually create a React app, but Facebook has created a 
Node package create-react-app to generate a boilerplate version of a React application. This has the added benefit 
of providing a consistent structure for React apps that you will recognize as you move between React projects. It 
also provides an out-of-the-box build script and development server.

We will use npx, a package runner tool that comes with npm 5.2+ and higher, to install and run create-react-app.
You can simply run this command:
	npx create-react-app myfirstreactapp

REACT APP STRUCTURE: Most of what you see will not be visible to the visitor of your web app. React uses a tool 
called webpack which transforms the directories and files here into static assets. Visitors to your site are served 
those static assets.

.gitignore FILE: This is the standard file used by the source control tool git to determine which files and 
directories to ignore when committing code. While this file exists, create-react-app did not create a git repo 
within this folder.

package.json FILE: This file outlines all the settings for the React app.

- name: is the name of your app
- version: is the current version
- "private": true: is a failsafe setting to avoid accidentally publishing your app as a public package within the 
                   npm ecosystem.
- dependencies: contains all the required Node modules and versions required for the application.
- scripts: specifies aliases that you can use to access some of the react-scripts commands in a more efficient 
	   manner. 
- browserslist: provides information about browser compatibility of the app 
- eslintConfig: takes care of the code linting. (Linting is the process of running a program that will analyse code 
		 for potential errors.)

node-modules DIRECTORY: This directory contains dependencies and sub-dependencies of packages used by the current 
React app, as specified by package.json. This folder is automatically added to the .gitignore for good reason! 

package-lock.json FILE: This provides a way for teams working on private apps to ensure that they have the same 
version of dependencies and sub-dependencies. It also contains a history of changes to package.json, so you can 
quickly look back at dependency changes.

public DIRECTORY: It contains assets that will be served directly without additional processing by webpack.

src DIRECTORY: This contains the JavaScript that will be processed by webpack and is the heart of the React app. 
Browsing this folder, you see the main App JavaScript component (App.js), its associated styles (App.css), and test 
suite (App.test.js). index.js and its styles (index.css) provide an entry into the App and also kick off the 
registerServiceWorker.js. This service worker takes care of caching and updating files for the end-user. It allows 
for offline capability and faster page loads after the initial visit.

components/ & views/ DIRECTORIES: As your React app grows, it is common to add a components/ directory to organize 
components and component-related files and a views/ directory to organize React views and view-related files.

STARTING THE REACT APP DEVELOPMENT SERVER: You just need to run npm start in your app directory to begin serving 
the development server. It should auto-open a tab in your browser that points to http://localhost:3000/ (if not, 
manually visit that address).



-----LECCION 6-----
REACT DEVELOPER TOOLS: Use React Developer Tools to debug your React applications

INSTALL IT: Facebook created a Chrome extension to help with debugging React Apps. It allows developers to inspect 
React components, view their properties, and interact with them while looking at the application in Google Chrome.
Link: https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi

To open the React Developer Tools, first open Chrome DevTools (View > Developer > Developer Tools). On the same 
banner as Elements, Sources, Console, etc., there will be two new React tabs: Components and Profiler. These two 
tabs will only appear on sites using React.

For more tips about React Dev Tools: https://www.codecademy.com/paths/web-development/tracks/front-end-applications-with-react/modules/react-development-setup-and-ravenous-part-1/informationals/ready-react-developer-tools



-----LECCION 7-----
COMPONENTS INTERACT
COMPONENTS RENDER OTHER COMPONENTS: In the below example, Crazy‘s render method returns an instance of the OMG 
component class. You could say that 
Crazy renders an <OMG />.

class OMG extends React.Component {
  render() {
    return <h1>Whooaa!</h1>;
  }
}
 
class Crazy extends React.Component {
  render() {
    return <OMG />; <-- ACA!!!
  }
}

When a component renders another component, what happens is very similar to what happens when ReactDOM.render() 
renders a component.

It may not seem like a big deal yet, but you’ve just discovered the key to React’s power.
By nesting components inside of other components, you can build infinitely complex architectures, even if each 
component is relatively simple. The relationship that you just built is the fundamental relationship of React.js.



-----LECCION 8-----
this.props

ACCESS A COMPONENT'S PROPS: A component’s props is an object. It holds information about that component. To see a 
component’s props object, you use the expression "this.props".

PASS 'props' TO A COMPONENT: You can pass information to a React component. How? By giving that component an 
attribute. Let’s say that you want to pass a component the message, "This is some top secret info.". Here’s how you 
could do it:
	<Example message="This is some top secret info." />

As you can see, to pass information to a component, you need a name for the information that you want to pass.

In the above example, we used the name message. You can use any name you want. If you want to pass information that 
isn’t a string, then wrap that information in curly braces. Here’s how you would pass an array:
	<Greeting myInfo={["top", "secret", "lol"]} />

Or a multiple set of values:
	<Greeting name="Frarthur" town="Flundon" age={2} haunted={false} />

RENDER A COMPONENT'S PROPS: Here’s how to make a component display passed-in information:
1 - Find the component class that is going to receive that information.
2 - Include this.props.name-of-information in that component class’s render method’s return statement.

EJ:
class Greeting extends React.Component {
  render() {
    return <h1>Hi there, {this.props.firstName}!</h1>; <-- ACA!!!
  }
}

ReactDOM.render(
  <Greeting firstName='Pedurum' />, <-- ACA!!!
  document.getElementById('app')
);


RENDER DIFFERENT UI BASED ON PROPS: 
export class Welcome extends React.Component {
  render() {
    if (this.props.name === 'Wolfgang Amadeus Mozart') { <-- ACA!!!
      return (
      	<h2>
      	  hello sir it is truly great to meet you here on the web
      	</h2>
      );
    } else {
      return (
      	<h2>
      	  WELCOME "2" MY WEB SITE BABYYY!!!!!
      	</h2>
      );
    }
  }
}

You can tell from this.props.name on line 3 that Welcome expects to receive a piece of information called name. 
However, Welcome never renders this piece of information! Instead, it uses the information to make a decision.



handleEvent, onEvent, AND this.props.onEvent: Let’s talk about naming things.
If you are listening for a “click” event, then you name your event handler handleClick. If you are listening for a 
“keyPress” event, then you name your event handler handleKeyPress:
Your prop name should be the word on, plus your event type. If you are listening for a “click” event, then you name 
your prop onClick. If you are listening for a “keyPress” event, then you name your prop onKeyPress:

class MyClass extends React.Component {
  handleHover() {
    alert('I am an event handler.');
    alert('I will listen for a "hover" event.');
  }
 
  render() {
    return <Child onHover={this.handleHover} />;
  }
}

this.props.children: Every component’s props object has a property named children.
this.props.children will return everything in between a component’s opening and closing JSX tags.

So far, all of the components that you’ve seen have been self-closing tags, such as <MyComponentClass />. They 
don’t have to be! You could write <MyComponentClass></MyComponentClass>, and it would still work.
this.props.children would return everything in between <MyComponentClass> and </MyComponentClass>.

If a component has more than one child between its JSX tags, then this.props.children will return those children 
in an array.

defaultProps PROPERTY: The defaultProps property should be equal to an object. Inside of this object, write 
properties for any default props that you’d like to set:

class Example extends React.Component {
  render() {
    return <h1>{this.props.text}</h1>;
  }
}
 
Example.defaultProps = { text: 'yo' }; 

If an <Example /> doesn’t get passed any text, then it will display “yo.”
If an <Example /> does get passed some text, then it will display that passed-in text.



-----LECCION 9-----
STATE: Dynamic information is information that can change. React components will often need dynamic information in 
order to render. For example, imagine a component that displays the score of a basketball game. The score of the 
game might change over time, meaning that the score is dynamic.

There are two ways for a component to get dynamic information: props and state. Besides props and state, every 
value used in a component should always stay exactly the same.

props and state are all that you need to set up an ecosystem of interacting React components.

SETTING INITIAL STATE: To make a component have state, give the component a state property. This property should be 
declared inside of a constructor method, like this:
class Example extends React.Component {
  constructor(props) {
    super(props);
    this.state = { mood: 'decent' };
  }
 
  render() {
    return <div></div>;
  }
}
 
<Example />

this.state should be equal to an object. This object represents the initial “state” of any component instance. 
It is important to note that React components always have to call super in their constructors to be set up properly.

ACCESS A COMPONENT'S STATE: To read a component’s state, use the expression this.state.name-of-property:

UPDATE STATE WITH this.setState: A component can also change its own state. this.setState() takes two arguments: an 
object that will update the component’s state, and a callback. You basically never need the callback.

this.setState() takes an object, and merges that object with the component’s current state. If there are properties 
in the current state that aren’t part of that object, then those properties remain how they were.

EJ:
<Example /> has a state of:
	{
  	  mood:   'great',
  	  hungry: false
	}
	
Now, let’s say that <Example /> were to call:
	this.setState({ hungry: true });

After that call, here is what <Example />‘s state would be:
	{
  	  mood:   'great',
    	  hungry: true
	}
The mood part of the state remains unaffected!

EVENT HANDLER WITH 'this': In React, whenever you define an event handler that uses this, you need to add 
this.methodName = this.methodName.bind(this) to your constructor function.
EJ:
class Example extends React.Component {
  constructor(props) {
    super(props);
    ...
    this.makeSomeFog = this.makeSomeFog.bind(this); <-- ACA!!!
  }
 
  makeSomeFog() {
    ...
  }
}

Articulo que lo explica bien: https://reactjs.org/docs/handling-events.html

BONUS: You can’t call this.setState() from inside of the .render() method. this.setState() automatically 
calls .render(). If .render() calls this.setState(), then an infinite loop is created.



-----LECCION 10-----
STATELESS COMPONENTS FROM STATEFUL COMPONENTS
Our programming pattern uses two React components: a stateful component, and a stateless component. “Stateful” 
describes any component that has a state property; “stateless” describes any component that does not.

STATEFUL COMPONENT CLASS EXAMPLE: 
class Parent extends React.Component {
  constructor(props) {
    super(props);
    this.state = { name: 'Frarthur' };
  }
  render() {
    return <div></div>;
  }
};

STATELESS COMPONENT CLASS EXAMPLE:
export class Child extends React.Component {
  render() {
    return <h1>Hey, my name is {this.props.name}!</h1>;
  }
};

A <Parent /> is going to pass a prop to a <Child />. That means that a <Parent /> is going to render a <Child />. 
Rendering is the only way for a component to pass props to another component. Child is ready to inherit a prop and 
display it.

PASS A COMPONENT'S STATE: A <Parent /> is supposed to pass its state to a <Child />. Before a <Parent /> can pass 
anything to a <Child />, you need to import Child into Parent.js.

class Parent extends React.Component {
  constructor(props) {
    super(props);
    this.state = { name: 'Frarthur' };
  }
  render() {
    return <Child name={this.state.name} />;	<-- ACA!!!
  }
};

PRINT: "Hey, my name is Frarthur!"	<-- ACA!!!

DON'T UPDATE PROPS: A component should never update this.props. A React component should use props to store 
information that can be changed, but can only be changed by a different component.
A React component should use state to store information that the component itself can change.



-----LECCION 11-----
AUTHENTICATION AND OAUTH
https://www.codecademy.com/paths/web-development/tracks/front-end-applications-with-react/modules/ravenous-part-four/informationals/ready-authentication



