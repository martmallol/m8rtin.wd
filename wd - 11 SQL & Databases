WEB DEVELOPMENT CODECADEMY

-----LECCION 1----- 
WHY LEARN SQL?
A database is a set of data stored in a computer. This data is usually structured into tables. Tables can grow large 
and have a multitude of columns and records.

SQL allows you to write queries (cuando el usuario escribe en un buscador) which define the subset of data you are 
seeking. Unlike Excel, your computer and SQL will handle HOW to get the data; you can focus on what data you would 
like. You can save these queries, refine them, share them, and run them on different databases. Many databases use 
SQL (Structured Query Language).

CREATING USAGE FUNNELS: Visitors to ACME’s website follow a simple workflow:
1 - Browse items available for sale
2 - Click an icon to begin the checkout process
3 - Enter payment information to complete their purchase

Not all users who browse on the website will find something that they like enough to checkout, and not all users 
who begin the checkout process will finish entering their payment information to make a purchase.

This type of multi-step process where some users leave at each step is called a funnel.

ANALIZING USER CHURN: A churn rate is the percent of subscribers to a monthly service who have canceled.

DETERMINING WEB TRAFFIC ATTRIBUTION: UTM Parameters are special tags that site owners add to their pages to track 
what website a user was on before they reach the website. For instance:
- If a user found ACME’s website through Google search, the table page_visits might have utm_source set to 
  ‘google’.
- If a different user clicked a Facebook ad to get to ACME’s website, then their row in page_visits might have 
  utm_source as ‘facebook’.
  
  

-----LECCION 2-----
QUERIES
One of the core purposes of the SQL language is to retrieve information stored in a database. This is commonly 
referred to as querying. Queries allow us to communicate with the database by asking questions and returning a 
result set with data relevant to the question. 

Suppose we want to see all values in a table. We will use the syntax:
	SELECT * FROM table_name;

1. SELECT * indicates that we want to select all columns.
2. FROM table_name indicates which table we are interested in.
3. ; ends a SQL command.

THE SELECT COMMAND: Previously, we learned that SELECT is used every time you want to query data from a database 
and * means all columns.

Suppose we are only interested in two of the columns. We can select individual columns by their names (separated 
by a comma):
	SELECT column1, column2
	FROM table_name;

AS: AS is a keyword in SQL that allows you to rename a column or table using an alias. The new name can be 
anything you want as long as you put it inside of single quotes.
	SELECT name AS 'Titles' (la columna pasa de llamarse 'names' a llamarse 'Titles'
	FROM movies;

DISTINCT: When we are examining data in a table, it can be helpful to know what distinct values exist in a 
particular column. DISTINCT is used to return unique values in the output. It filters out all duplicate values in 
the specified column(s).

For instance,
	SELECT tools 
	FROM inventory;

might produce:
	
	tools
	Hammer
	Nails
	Nails
	Nails

By adding DISTINCT before the column name,
	SELECT DISTINCT tools 
	FROM inventory;

the result would now be:
	tools
	Hammer
	Nails
	
WHERE: We can restrict our query results using the WHERE clause in order to obtain only the information we want.
Following this format, the statement below filters the result set to only include top rated movies (IMDb ratings 
greater than 8):
	SELECT *
	FROM movies
	WHERE imdb_rating > 8;	

LIKE: LIKE can be a useful operator when you want to compare similar values.

The movies table contains two films with similar titles, ‘Se7en’ and ‘Seven’.

How could we select all movies that start with ‘Se’ and end with ‘en’ and have exactly one character in the middle?

	SELECT * 
	FROM movies
	WHERE name LIKE 'Se_en';	

The _ means you can substitute any individual character here without breaking the pattern. The names Seven and 
Se7en both match this pattern.

LIKE & THE % SIGN: The percentage sign % is another wildcard character that can be used with LIKE.

This statement below filters the result set to only include movies with names that begin with the letter ‘A’:
	SELECT * 
	FROM movies
	WHERE name LIKE 'A%';

% is a wildcard character that matches zero or more missing letters in the pattern. For example:
- A% matches all movies with names that begin with letter ‘A’
- %a matches all movies that end with ‘a’

We can also use % both before and after a pattern:
	SELECT * 
	FROM movies 
	WHERE name LIKE '%man%';

Here, any movie that contains the word ‘man’ in its name will be returned in the result. LIKE is not case 
sensitive. ‘Batman’ and ‘Man of Steel’ will both appear in the result of the query above.

IS NULL: More often than not, the data you encounter will have missing values. It is not possible to test for NULL 
values with comparison operators, such as = and !=.

Instead, we will have to use these operators:
- IS NULL
- IS NOT NULL

To filter for all movies with an IMDb rating:
	SELECT name
	FROM movies 
	WHERE imdb_rating IS NOT NULL;

BETWEEN: The BETWEEN operator is used in a WHERE clause to filter the result set within a certain range. It 
accepts two values that are either numbers, text or dates.

For example, this statement filters the result set to only include movies with years from 1990 up to, and 
including 1999.
	SELECT *
	FROM movies
	WHERE year BETWEEN 1990 AND 1999;

When the values are text, BETWEEN filters the result set for within the alphabetical range.

In this statement, BETWEEN filters the result set to only include movies with names that begin with the letter 
‘A’ up to, but not including ones that begin with ‘J’.
	SELECT *
	FROM movies
	WHERE name BETWEEN 'A' AND 'J';

AND: Sometimes we want to combine multiple conditions in a WHERE clause to make the result set more specific and 
useful. One way of doing this is to use the AND operator. Here, we use the AND operator to only return 90’s 
romance movies.

	SELECT * 
	FROM movies
	WHERE year BETWEEN 1990 AND 1999
	   AND genre = 'romance';

- year BETWEEN 1990 AND 1999 is the 1st condition.
- genre = 'romance' is the 2nd condition.
- AND combines the two conditions.

OR: Similar to AND, the OR operator can also be used to combine multiple conditions in WHERE

Suppose we want to check out a new movie or something action-packed:
	SELECT *
	FROM movies
	WHERE year > 2014
	   OR genre = 'action';

- year > 2014 is the 1st condition.
- genre = 'action' is the 2nd condition.
- OR combines the two conditions.

ORDER BY: It is often useful to list the data in our result set in a particular order. We can sort the results 
using ORDER BY, either alphabetically or numerically. Sorting the results often makes the data more useful and 
easier to analyze.

For example, if we want to sort everything by the movie’s title from A through Z:
	SELECT *
	FROM movies
	ORDER BY name;
	ORDER BY is a clause that indicates you want to sort the result set by a particular column.

- name is the specified column.

Sometimes we want to sort things in a decreasing order. For example, if we want to select all of the well-
received movies, sorted from highest to lowest by their year:

	SELECT *
	FROM movies
	WHERE imdb_rating > 8
	ORDER BY year DESC;

- DESC is a keyword used in ORDER BY to sort the results in descending order (high to low or Z-A).
- ASC is a keyword used in ORDER BY to sort the results in ascending order (low to high or A-Z).

Note: ORDER BY always goes after WHERE (if WHERE is present).

LIMIT: Most SQL tables contain hundreds of thousands of records. In those situations, it becomes important to cap 
the number of rows in the result.

For instance, imagine that we just want to see a few examples of records.
	SELECT *
	FROM movies
	LIMIT 10;

LIMIT is a clause that lets you specify the maximum number of rows the result set will have. 
LIMIT always goes at the very end of the query. Also, it is not supported in all SQL databases.

CASE: A CASE statement allows us to create different outputs (usually in the SELECT statement). It is SQL’s way 
of handling if-then logic.

Suppose we want to condense the ratings in movies to three levels:
- If the rating is above 8, then it is Fantastic.
- If the rating is above 6, then it is Poorly Received.
- Else, Avoid at All Costs.

	SELECT name,
	 CASE
	  WHEN imdb_rating > 8 THEN 'Fantastic'
	  WHEN imdb_rating > 6 THEN 'Poorly Received'
	  ELSE 'Avoid at All Costs'
	 END
	FROM movies;

- Each WHEN tests a condition and the following THEN gives us the string if the condition is true.
- The ELSE gives us the string if all the above conditions are false.
- The CASE statement must end with END.
  
  

-----LECCION 3-----
SQL: CREATING, UPDATING & DELETING DATA
You can  access a glossary of all the SQL commands taught in here: https://www.codecademy.com/article/sql-commands

STATEMENTS & CREATING A TABLE: 
	CREATE TABLE table_name (
	   column_1 data_type, 
	   column_2 data_type, 
	   column_3 data_type
	);

Let’s break down the components of a statement:

1. CREATE TABLE is a clause. Clauses perform specific tasks in SQL. By convention, clauses are written in capital 
   letters. Clauses can also be referred to as commands.
2. table_name refers to the name of the table that the command is applied to.
3. (column_1 data_type, column_2 data_type, column_3 data_type) is a parameter. A parameter is a list of columns, 
   data types, or values that are passed to a clause as an argument. Here, the parameter is a list of column 
   names and the associated data type.

The structure of SQL statements vary. The number of lines used does not matter. A statement can be written all on 
one line, or split up across multiple lines if it makes it easier to read.

CREATE: CREATE statements allow us to create a new table in the database. You can use the CREATE statement 
anytime you want to create a new table from scratch. The statement below creates a new table named celebs.

EJ	CREATE TABLE celebs (
	   id INTEGER, 
	   name TEXT, 
	   age INTEGER
	);

INSERT: The INSERT statement inserts a new row into a table.

We can use the INSERT statement when you want to add new records. The statement below enters a record for Justin 
Bieber into the celebs table.

EJ	INSERT INTO celebs (id, name, age) 
	VALUES (1, 'Justin Bieber', 22);

- INSERT INTO is a clause that adds the specified row or rows.
- celebs is the table the row is added to.
- (id, name, age) is a parameter identifying the columns that data will be inserted into.
- VALUES is a clause that indicates the data being inserted.
- (1, 'Justin Bieber', 22) is a parameter identifying the values being inserted.
	- 1: 		    an integer that will be added to id column
	- 'Justin Bieber': text that will be added to name column
	- 22: 		    an integer that will be added to age column

ALTER: The ALTER TABLE statement adds a new column to a table. You can use this command when you want to add 
columns to a table. The statement below adds a new column twitter_handle to the celebs table.
	
EJ	ALTER TABLE celebs 
	ADD COLUMN twitter_handle TEXT;

1. ALTER TABLE is a clause that lets you make the specified changes.
2. celebs is the name of the table that is being changed.
3. ADD COLUMN is a clause that lets you add a new column to a table:
4. The rows that existed before the column was added have NULL (∅) values for twitter_handle.

UPDATE: The UPDATE statement edits a row in a table. You can use the UPDATE statement when you want to change 
existing records. The statement below updates the record with an id value of 4 to have the twitter_handle 
@taylorswift13.

	UPDATE celebs 
	SET twitter_handle = '@taylorswift13' 
	WHERE id = 4; 

DELETE: The DELETE FROM statement deletes one or more rows from a table. You can use the statement when you want 
to delete existing records. The statement below deletes all records in the celeb table with no twitter_handle:
	DELETE FROM celebs 
	WHERE twitter_handle IS NULL;

CONSTRAINTS: Constraints that add information about how a column can be used are invoked after specifying the 
data type for a column. They can be used to tell the database to reject inserted data that does not adhere to a 
certain restriction. The statement below sets constraints on the celebs table.

	CREATE TABLE celebs (
	   id INTEGER PRIMARY KEY,   <-- ACA!!!
	   name TEXT UNIQUE,   <-- ACA!!!
	   date_of_birth TEXT NOT NULL,   <-- ACA!!!
	   date_of_death TEXT DEFAULT 'Not Applicable'   <-- ACA!!!
	);

1. PRIMARY KEY columns can be used to uniquely identify the row. Attempts to insert a row with an identical value 
to a row already in the table will result in a constraint violation which will not allow you to insert the new 
row.

2. UNIQUE columns have a different value for every row. This is similar to PRIMARY KEY except a table can have 
many different UNIQUE columns.

3. NOT NULL columns must have a value. Attempts to insert a row without a value for a NOT NULL column will result 
in a constraint violation and the new row will not be inserted.

4. DEFAULT columns take an additional argument that will be the assumed value for an inserted row if the new row 
does not specify a value for that column.
  
  

-----LECCION 4-----
AGGREGATE FUNCTIONS

COUNT: The fastest way to calculate how many rows are in a table is to use the COUNT() function.
EJ 	SELECT COUNT(*)
	FROM table_name;

SUM: SUM() is a function that takes the name of a column as an argument and returns the sum of all the values in 
that column.

What is the total number of downloads for all of the apps combined?
	SELECT SUM(downloads)
	FROM fake_apps;

MAX / MIN: The MAX() and MIN() functions return the highest and lowest values in a column, respectively.

How many downloads does the most popular app have?
	SELECT MAX(downloads)
	FROM fake_apps;
The most popular app has 31,090 downloads!

AVERAGE: SQL uses the AVG() function to quickly calculate the average value of a particular column.

The statement below returns the average number of downloads for an app in our database:

	SELECT AVG(downloads)
	FROM fake_apps;

ROUND: It rounds the values in the column to the number of decimal places specified by the integer.

	SELECT ROUND(price, 0)
	FROM fake_apps;

Here, we pass the column price and integer 0 as arguments. SQL rounds the values in the column to 0 decimal places 
in the output.

GROUP BY: Oftentimes, we will want to calculate an aggregate for data with certain characteristics.

For instance, we might want to know the mean IMDb ratings for all movies each year. 
	SELECT AVG(imdb_rating)
	FROM movies
	WHERE year = 1999;
	 
	SELECT AVG(imdb_rating)
	FROM movies
	WHERE year = 2000;
	 
	SELECT AVG(imdb_rating)
	FROM movies
	WHERE year = 2001;

Luckily, there’s a better way! We can use GROUP BY to do this in a single step:

	SELECT year,
	   AVG(imdb_rating)
	FROM movies
	GROUP BY year
	ORDER BY year;

The GROUP BY statement comes after any WHERE statements, but before ORDER BY or LIMIT.

GROUP BY SYNTAX SUGAR: Sometimes, we want to GROUP BY a calculation done on a column. SQL lets us use column 
reference(s) in our GROUP BY that will make our lives easier.
- 1 is the first column selected
- 2 is the second column selected
- 3 is the third column selected
and so on.

EJ	SELECT ROUND(imdb_rating),
	   COUNT(name)
	FROM movies
	GROUP BY 1
	ORDER BY 1;
Here, the 1 refers to the first column in our SELECT statement, ROUND(imdb_rating).

HAVING: SQL also allows you to filter which groups to include and which to exclude.

For instance, imagine that we want to see how many movies of different genres were produced each year, but we only 
care about years and genres with at least 10 movies.

We can’t use WHERE here because we don’t want to filter the rows; we want to filter groups. This is where HAVING 
comes in.

EJ	SELECT year,
	   genre,
	   COUNT(name)
	FROM movies
	GROUP BY 1, 2
	HAVING COUNT(name) > 10;

- When we want to limit the results of a query based on values of the individual rows, use WHERE.
- When we want to limit the results of a query based on an aggregate property, use HAVING.

HAVING statement always comes after GROUP BY, but before ORDER BY and LIMIT.
  
  

-----LECCION 5-----
MULTIPLE TABLES 
In order to efficiently store data, we often spread related information across multiple tables.

COMBINING TABLES WITH SQL: Various tables can share the same information, such as a user's id for example.
We can combine tables using the JOIN function 

If we want to combine orders and customers, we would type:
	SELECT *
	FROM orders
	JOIN customers
	  ON orders.customer_id = customers.customer_id;

1. The first line selects all columns from our combined table. If we only want to select certain columns, we can 
   specify which ones we want.
2. The second line specifies the first table that we want to look in, orders
3. The third line uses JOIN to say that we want to combine information from orders with customers.
4. The fourth line tells us how to combine the two tables. We want to match orders table’s customer_id column with 
   customers table’s customer_id column.

INNER JOINS: When we perform a simple JOIN (often called an inner join) our result only includes rows that match our 
ON condition. If some rows don't match, they won't be included in the merge. 

LEFT JOINS: What if we want to combine two tables and keep some of the un-matched rows?

SQL lets us do this through a command called LEFT JOIN. A left join will keep all rows from the first table, 
regardless of whether there is a matching row in the second table. The final result will keep all rows of the first 
table but will omit the un-matched row from the second table.

EJ	SELECT *
	FROM table1
	LEFT JOIN table2
	  ON table1.c2 = table2.c2;

1. The first line selects all columns from both tables.
2. The second line selects table1 (the “left” table).
3. The third line performs a LEFT JOIN on table2 (the “right” table).
4. The fourth line tells SQL how to perform the join (by looking for matching values in column c2).

PRIMARY KEY VS FOREIGN KEY: Primary keys have a few requirements:
- None of the values can be NULL.
- Each value must be unique (i.e., you can’t have two customers with the same customer_id in the customers table).
- A table can not have more than one primary key column.

When the primary key for one table appears in a different table, it is called a foreign key. So customer_id is a 
primary key when it appears in customers, but a foreign key when it appears in orders.

Why is this important? The most common types of joins will be joining a foreign key from one table with the primary 
key from another table. For instance, when we join orders and customers, we join on customer_id, which is a foreign 
key in orders and the primary key in customers.




