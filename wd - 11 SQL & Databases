WEB DEVELOPMENT CODECADEMY

-----LECCION 1----- 
WHY LEARN SQL?
A database is a set of data stored in a computer. This data is usually structured into tables. Tables can grow large 
and have a multitude of columns and records.

SQL allows you to write queries (cuando el usuario escribe en un buscador) which define the subset of data you are 
seeking. Unlike Excel, your computer and SQL will handle HOW to get the data; you can focus on what data you would 
like. You can save these queries, refine them, share them, and run them on different databases. Many databases use 
SQL (Structured Query Language).

CREATING USAGE FUNNELS: Visitors to ACME’s website follow a simple workflow:
1 - Browse items available for sale
2 - Click an icon to begin the checkout process
3 - Enter payment information to complete their purchase

Not all users who browse on the website will find something that they like enough to checkout, and not all users who 
begin the checkout process will finish entering their payment information to make a purchase.

This type of multi-step process where some users leave at each step is called a funnel.

ANALIZING USER CHURN: A churn rate is the percent of subscribers to a monthly service who have canceled.

DETERMINING WEB TRAFFIC ATTRIBUTION: UTM Parameters are special tags that site owners add to their pages to track 
what website a user was on before they reach the website. For instance:
- If a user found ACME’s website through Google search, the table page_visits might have utm_source set to ‘google’.
- If a different user clicked a Facebook ad to get to ACME’s website, then their row in page_visits might have 
  utm_source as ‘facebook’.
  
  

-----LECCION 2-----
QUERIES
One of the core purposes of the SQL language is to retrieve information stored in a database. This is commonly 
referred to as querying. Queries allow us to communicate with the database by asking questions and returning a 
result set with data relevant to the question. 

Suppose we want to see all values in a table. We will use the syntax:
	SELECT * FROM table_name;

1. SELECT * indicates that we want to select all columns.
2. FROM table_name indicates which table we are interested in.
3. ; ends a SQL command.

THE SELECT COMMAND: Previously, we learned that SELECT is used every time you want to query data from a database 
and * means all columns.

Suppose we are only interested in two of the columns. We can select individual columns by their names (separated 
by a comma):
	SELECT column1, column2
	FROM table_name;

AS: AS is a keyword in SQL that allows you to rename a column or table using an alias. The new name can be 
anything you want as long as you put it inside of single quotes.
	SELECT name AS 'Titles' (la columna pasa de llamarse 'names' a llamarse 'Titles'
	FROM movies;

DISTINCT: When we are examining data in a table, it can be helpful to know what distinct values exist in a 
particular column. DISTINCT is used to return unique values in the output. It filters out all duplicate values in 
the specified column(s).

For instance,
	SELECT tools 
	FROM inventory;

might produce:
	
	tools
	Hammer
	Nails
	Nails
	Nails

By adding DISTINCT before the column name,
	SELECT DISTINCT tools 
	FROM inventory;

the result would now be:
	tools
	Hammer
	Nails
	
WHERE: We can restrict our query results using the WHERE clause in order to obtain only the information we want.
Following this format, the statement below filters the result set to only include top rated movies (IMDb ratings 
greater than 8):
	SELECT *
	FROM movies
	WHERE imdb_rating > 8;	

LIKE: LIKE can be a useful operator when you want to compare similar values.

The movies table contains two films with similar titles, ‘Se7en’ and ‘Seven’.

How could we select all movies that start with ‘Se’ and end with ‘en’ and have exactly one character in the middle?

	SELECT * 
	FROM movies
	WHERE name LIKE 'Se_en';	

The _ means you can substitute any individual character here without breaking the pattern. The names Seven and 
Se7en both match this pattern.

LIKE & THE % SIGN: The percentage sign % is another wildcard character that can be used with LIKE.

This statement below filters the result set to only include movies with names that begin with the letter ‘A’:
	SELECT * 
	FROM movies
	WHERE name LIKE 'A%';

% is a wildcard character that matches zero or more missing letters in the pattern. For example:
- A% matches all movies with names that begin with letter ‘A’
- %a matches all movies that end with ‘a’

We can also use % both before and after a pattern:
	SELECT * 
	FROM movies 
	WHERE name LIKE '%man%';

Here, any movie that contains the word ‘man’ in its name will be returned in the result. LIKE is not case 
sensitive. ‘Batman’ and ‘Man of Steel’ will both appear in the result of the query above.

IS NULL: More often than not, the data you encounter will have missing values. It is not possible to test for NULL values with comparison operators, such as = and !=.

Instead, we will have to use these operators:
- IS NULL
- IS NOT NULL

To filter for all movies with an IMDb rating:
	SELECT name
	FROM movies 
	WHERE imdb_rating IS NOT NULL;

BETWEEN: The BETWEEN operator is used in a WHERE clause to filter the result set within a certain range. It 
accepts two values that are either numbers, text or dates.

For example, this statement filters the result set to only include movies with years from 1990 up to, and 
including 1999.
	SELECT *
	FROM movies
	WHERE year BETWEEN 1990 AND 1999;

When the values are text, BETWEEN filters the result set for within the alphabetical range.

In this statement, BETWEEN filters the result set to only include movies with names that begin with the letter 
‘A’ up to, but not including ones that begin with ‘J’.
	SELECT *
	FROM movies
	WHERE name BETWEEN 'A' AND 'J';

AND: Sometimes we want to combine multiple conditions in a WHERE clause to make the result set more specific and 
useful. One way of doing this is to use the AND operator. Here, we use the AND operator to only return 90’s 
romance movies.

	SELECT * 
	FROM movies
	WHERE year BETWEEN 1990 AND 1999
	   AND genre = 'romance';

- year BETWEEN 1990 AND 1999 is the 1st condition.
- genre = 'romance' is the 2nd condition.
- AND combines the two conditions.

OR: Similar to AND, the OR operator can also be used to combine multiple conditions in WHERE

Suppose we want to check out a new movie or something action-packed:
	SELECT *
	FROM movies
	WHERE year > 2014
	   OR genre = 'action';

- year > 2014 is the 1st condition.
- genre = 'action' is the 2nd condition.
- OR combines the two conditions.

ORDER BY: It is often useful to list the data in our result set in a particular order. We can sort the results 
using ORDER BY, either alphabetically or numerically. Sorting the results often makes the data more useful and 
easier to analyze.

For example, if we want to sort everything by the movie’s title from A through Z:
	SELECT *
	FROM movies
	ORDER BY name;
	ORDER BY is a clause that indicates you want to sort the result set by a particular column.

- name is the specified column.

Sometimes we want to sort things in a decreasing order. For example, if we want to select all of the well-
received movies, sorted from highest to lowest by their year:

	SELECT *
	FROM movies
	WHERE imdb_rating > 8
	ORDER BY year DESC;

- DESC is a keyword used in ORDER BY to sort the results in descending order (high to low or Z-A).
- ASC is a keyword used in ORDER BY to sort the results in ascending order (low to high or A-Z).

Note: ORDER BY always goes after WHERE (if WHERE is present).

LIMIT: Most SQL tables contain hundreds of thousands of records. In those situations, it becomes important to cap 
the number of rows in the result.

For instance, imagine that we just want to see a few examples of records.
	SELECT *
	FROM movies
	LIMIT 10;

LIMIT is a clause that lets you specify the maximum number of rows the result set will have. 
LIMIT always goes at the very end of the query. Also, it is not supported in all SQL databases.

CASE: A CASE statement allows us to create different outputs (usually in the SELECT statement). It is SQL’s way 
of handling if-then logic.

Suppose we want to condense the ratings in movies to three levels:
- If the rating is above 8, then it is Fantastic.
- If the rating is above 6, then it is Poorly Received.
- Else, Avoid at All Costs.

	SELECT name,
	 CASE
	  WHEN imdb_rating > 8 THEN 'Fantastic'
	  WHEN imdb_rating > 6 THEN 'Poorly Received'
	  ELSE 'Avoid at All Costs'
	 END
	FROM movies;

- Each WHEN tests a condition and the following THEN gives us the string if the condition is true.
- The ELSE gives us the string if all the above conditions are false.
- The CASE statement must end with END.






