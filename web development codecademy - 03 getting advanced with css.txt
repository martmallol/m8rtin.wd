WEB DEVELOPMENT CODECADEMY:

-----LECCION 1----- 
INTRO TO THE BOX MODEL: The box model comprises the set of properties that define parts of an element that 
take up space on a web page. The model includes the content area’s size (width and height) and the element’s 
padding, border, and margin. The properties include:
1. width and height: The width and height of the content area.
2. padding: The amount of space between the content area and the border.
3. border: The thickness and style of the border surrounding the content area and padding.
4. margin: The amount of space between the border and the outside edge of the element.

HEIGHT AND WIDTH: By default, the dimensions of an HTML box are set to hold the raw contents of the box.
The CSS height and width properties can be used to modify these default dimensions.

The 'px' in the code stands for pixels. Pixels allow you to set the exact size of an element’s box 
(width and height). When the width and height of an element are set in pixels, it will be the same size on 
all devices — an element that fills a laptop screen will overflow a mobile screen.

BORDERS: A border is a line that surrounds an element, like a frame around a painting. Borders can be set with
a specific width, style, and color:
1. width- The thickness of the border. A border’s thickness can be set in pixels or with one of the following 
keywords: thin, medium, or thick.
2. style- The design of the border. Web browsers can render any of 10 different styles. Some of these styles 
include: none, dotted, and solid.
3. color- The color of the border. Web browsers can render colors using a few different formats, including 140 
built-in color keywords.

BORDER RADIUS: Thanks to CSS, a border doesn’t have to be square.
You can modify the corners of an element’s border box with the border-radius property.
EJ:
div.container {
  border: 3px solid blue;
  border-radius: 5px;
}

PADDING: The space between the contents of a box and the borders of a box is known as padding. Padding is like 
the space between a picture and the frame surrounding it. 
If you want to be more specific about the amount of padding on each side of a box’s content, you can use the 
following properties: padding-top; padding-right; padding-bottom; padding-left

PADDING SHORTHAND: Another implementation that lets you specify exactly how much padding there should be on 
each side of the content in a single declaration.

You can specify these properties in a few different ways:

- 4 Values: 
p.content-header {
  padding: 6px 11px 4px 9px;
}
In order, it specifies the padding-top value (6px), the padding-right value (11px), 
the padding-bottom value (4px), and the padding-left value (9px) of the content.

- 3 Values: 
p.content-header {
  padding: 5px 10px 20px;
}
If the left and right sides of the content are equal. The first value sets the padding-top value (5px), 
the second value sets the padding-left and padding-right values (10px), and the third one sets the 
padding-bottom value (20px).

- 2 Values: 
p.content-header {
  padding: 5px 10px;
}
If the top and bottom sides can be equal, and the left and right sides can be equal, we specify 2 values. 
The first one sets the padding-top and padding-bottom values (5px), and the second one sets the padding-left 
and padding-right values (10px).

MARGIN: Refers to the space directly outside of the box. The margin property is used to specify the size 
of this space.

MARGIN SHORTHAND: The shorthand syntax for margins is the same as padding.

AUTO: The margin property also lets you center content. However, you must follow a few syntax requirements.
div.headline {
  width: 400px;
  margin: 0 auto;
}
The 0 sets the top and bottom margins to 0 pixels. The auto value instructs the browser to adjust the left 
and right margins until the element is centered within its containing element.
In order to center an element, a width must be set for that element.

MARGIN COLLAPSE: Padding is space added inside an element’s border, while margin is space added outside an 
element’s border. One additional difference is that top and bottom margins, also called vertical margins, 
collapse, while top and bottom padding does not. Horizontal margins (left and right), like padding, are 
always displayed and added together. Unlike horizontal margins, vertical margins do not add. Instead, the 
larger of the two vertical margins sets the distance between adjacent elements.


MINIMUM NAD MAXIMUM HEIGHT AND WIDTH: Content, like text, can become difficult to read when a browser window 
is narrowed or expanded. These two properties ensure that content is legible by limiting the minimum and 
maximum widths of an element.

OVERFLOW: The overflow property controls what happens to content that spills, or overflows, outside its box. 
The overflow property is set on a parent element to instruct a web browser on how to render child elements.
The most commonly used values are:
1. hidden — when set to this value, any content that overflows will be hidden from view.
2. scroll — when set to this value, a scrollbar will be added to the element’s box so that the rest of the 
content can be viewed by scrolling.
3. visible — when set to this value, the overflow content will be displayed outside of the containing element. 
Note, this is the default value.

RESETTING DEFAULTS:
* {
  margin: 0;
  padding: 0;
}
The code in the example above resets the default margin and padding values of all HTML elements. 
It is often the first CSS rule in an external stylesheet.

VISIBILITY: Elements can be hidden from view with the visibility property.
The visibility property can be set to one of the following values:
hidden — hides an element.
visible — displays an element.
collapse — collapses an element.



-----LECCION 2----- 
INTRO A DEV TOOLS: How to manipulate the box model proportions.
1. Article:
https://www.codecademy.com/paths/web-development/tracks/getting-more-advanced-with-design/modules/learn-css-box-model/articles/f1-devtools-box-model
2. Video: 
https://www.youtube.com/watch?v=VuQ4pF_hfag



-----LECCION 3----- 
DISPLAY AND POSITIONING:
FLOW OF HTML: A browser will render the elements of an HTML document that has no CSS from left to right, top 
to bottom, in the same order as they exist in the document. This is called the flow of elements in HTML.
In this lesson, we will learn five properties for adjusting the position of HTML elements in the browser.

POSITION: Block-level elements create a block the full width of their parent elements, and they prevent other 
elements from appearing in the same horizontal space. Osea, que a priori no puedo poner varios elementos de manera
horizontal entre ellos. Cuando creo una division, automaticamente agarra el ancho de su padre, o de toda la pag.

The default position of an element can be changed by setting its position property. 
The position property can take one of five values:
- static - the default value (it does not need to be specified)
- relative
- absolute
- fixed
- sticky 

POSITION: RELATIVE
This value allows you to position an element relative to its default static position on the web page.
We can specify where the element should be positioned on the page. This is done by accompanying the position 
declaration with one or more of the following offset properties that will move the element away from its default 
static position:
- top - moves the element down from the top.
- bottom - moves the element up from the bottom.
- left - moves the element away from the left side (to the right).
- right - moves the element away from the right side (to the left).

.green-box {
  background-color: green;
  position: relative;
  top: 50px;
  left: 120px;
}

POSITION: ABSOLUTE
When an element’s position is set to absolute, all other elements on the page will ignore the element and act like 
it is not present on the page. The element will be positioned relative to its closest positioned parent element, 
while offset properties can be used to determine the final position from there.
Seria como tener una imagen en word que no dependa del texto, que el texto pise a la imagen.

POSITION: FIXED
When an element’s position is set to absolute, as in the last exercise, the element will scroll with the rest of 
the document when a user scrolls. We can fix an element to a specific position on the page (regardless of user 
scrolling) by setting its position to fixed, and accompanying it with the familiar offset properties top, bottom, 
left, and right. Esto me sirve para una navbar por ejemplo. Ya que siempre que scrolleo, esta me va a aparecer en 
la pagina.

.title {
  position: fixed;
  top: 0px;
  left: 0px;
}

The .title element will remain fixed to its position no matter where the user scrolls on the page

POSITION: STICKY
Since static and relative positioned elements stay in the normal flow of the document, when a user scrolls the page 
(or parent element) these elements will scroll too. And since fixed and absolute positioned elements are removed 
from the document flow, when a user scrolls, these elements will stay at their specified offset position.
The sticky value is another position value that keeps an element in the document flow as the user scrolls, 
but *sticks* to a specified position as the page is scrolled further. 

.box-bottom {
  background-color: darkgreen;
  position: sticky;
  top: 240px;
}

In the example above, the .box-bottom <div> will remain in its relative position, and scroll as usual. When it 
reaches 240 pixels from the top, it will stick to that position until it reaches the bottom of its parent 
container where it will “unstick” and rejoin the flow of the document.

Z-INDEX: When boxes on a web page have a combination of different positions, the boxes (and therefore, their 
content) can overlap with each other, making the content difficult to read or consume.
The z-index property controls how far back or how far forward an element should appear on the web page when 
elements overlap. This can be thought of as the depth of elements, with deeper elements appearing behind 
shallower elements.
Es como un efecto de parallax. Le da a cada elemento que lo tenga, una prioridad sobre si debe aparecer adelante
o atras.

INLINE DISPLAY:
In the example below, the <em> element is inline, because it displays its content on the same line as the 
content surrounding it, including the anchor tag.
EJ: To learn more about <em>inline</em> elements, read <a href="#">MDN documentation</a>.   


DISPLAY: BLOCK
Some elements are not displayed in the same line as the content around them. These are called block-level 
elements. These elements fill the entire width of the page by default, but their width property can also be set.
Elements that are block-level by default include all levels of heading elements (<h1> through <h6>), <p>, <div> 
and <footer>.

DISPLAY: INLINE-BLOCK
Inline-block display combines features of both inline and block elements. Inline-block elements can appear next 
to each other and we can specify their dimensions using the width and height properties. Images are the best 
example of default inline-block elements.
Por ejemplo, me sirve para poner una al lado de la otra a cada seccion de una navbar.

FLOAT: 
So far, we’ve learned how to specify the exact position of an element using offset properties. If we’re simply 
interested in moving an element as far left or as far right as possible in the container, we can use the float 
property.
The float property is often set using one of the values below:
- left - moves, or floats, elements as far left as possible.
- right - moves elements as far right as possible.

Floated elements must have a width specified, as in the example above. Otherwise, the element will assume the 
full width of its containing element, and changing the float value will not yield any visible results.

CLEAR:
The float property can also be used to float multiple elements at once. However, when multiple floated elements 
have different heights, it can affect their layout on the page. Specifically, elements can “bump” into each other 
and not allow other elements to properly move to the left or right.

The clear property specifies how elements should behave when they bump into each other on the page. 
It can take on one of the following values:
- left: the left side of the element will not touch any other element within the same containing element.
- right: the right side of the element will not touch any other element within the same containing element.
- both: neither side of the element will touch any other element within the same containing element.
- none: the element can touch either side.


-----LECCION 4-----
COLORS: Colors in CSS can be described in three different ways:
Named colors — English words that describe colors, also called keyword colors
RGB — numeric values that describe a mix of red, green, and blue
HSL — numeric values that describe a mix of hue, saturation, and lightness 

FOREGROUND VS BACKGROUND:
- color - this property styles an element’s foreground color.
- background-color - this property styles an element’s background color.

HEXADECIMAL: One syntax that we can use to specify colors is called hexadecimal. Colors specified using this 
system are called hex colors. A hex color begins with a hash character (#) which is followed by three or six 
characters. The characters represent values for red, blue and green.

RGB COLORS: There is another syntax for representing RGB values, commonly referred to as “RGB value” or just 
“RGB”, that uses decimal numbers rather than hexadecimal numbers, and it looks like this:

h1 {
  color: rgb(23, 45, 23);
}

In general, hex and RGB color representations are equivalent. Which you choose is a matter of personal taste. 
That said, it’s good to choose one and be consistent throughout your CSS, because it’s easier to compare 
hex to hex and RGB to RGB.

HUE, SATURATION AND LIGHTNESS: The syntax for HSL is similar to the decimal form of RGB, though it differs in 
important ways. The first number represents the degree of the hue, and can be between 0 and 360. The second 
and third numbers are percentages representing saturation and lightness respectively. 
Here is an example:

color: hsl(120, 60%, 70%);

HSL is convenient for adjusting colors. In RGB, making the color a little darker may affect all three color 
components. In HSL, that’s as easy as changing the lightness value. HSL is also useful for making a set of 
colors that work well together by selecting various colors that have the same lightness and saturation but 
different hues.

OPACITY AND ALPHA: In this exercise, we’ll change the opacity, or the amount of transparency, of some colors 
so that some or all of the bottom elements are visible through a covering element.
To use opacity in the HSL color scheme, *use hsla instead of hsl*, and four values instead of three. 
For example:

color: hsla(34, 100%, 50%, 0.1);

The first three values work the same as hsl. The fourth value (which we have not seen before) is the *alpha*. 
This last value is sometimes called opacity.
You can think of the alpha value as, “the amount of the background to mix with the foreground”. When a color’s 
alpha is below one, any color behind it will be blended in. The blending happens for each pixel; 
no blurring occurs.

The RGB color scheme has a similar syntax for opacity, rgba. Again, the first three values work the same as 
rgb and the last value is the alpha. 
Here’s an example:

color: rgba(234, 45, 98, 0.33);

There is a named color keyword for zero opacity, transparent. For example, 'color: transparent;'.


-----LECCION 5----- 
TYPOGRAPHY

FONT FAMILY: The font of an element can be changed using the font-family property.

When specifying a typeface with multiple words, like Times New Roman, it is recommended to use quotation marks 
(' ') to group the words together, like so:
h1 {
  font-family: 'Times New Roman';
}

There is a selection of fonts that will appear the same across all browsers and operating systems. These fonts 
are referred to as web safe fonts. You can check out a complete list of web safe fonts here: 
https://www.cssfontstack.com/

FALLBACK FONTS AND FONT STACKS: 
h1 {
  font-family: Caslon, Georgia, 'Times New Roman';
}
In the example above, Georgia and Times New Roman are fallback fonts to Caslon. When you specify a group of 
fonts, you have what is known as a font stack. A font stack usually contains a list of similar-looking fonts. 
Here, the browser will first try to use the Caslon font. If that’s not available, it will try to use a similar 
font, Georgia. And if Georgia is not available, it will try to use Times New Roman.

SERIF AND SANS-SERIF: The fonts Caslon, Georgia, and Times New Roman are Serif fonts. Serif fonts have extra 
details on the ends of each letter, as opposed to Sans-Serif fonts, which do not have the extra details.

FONT WEIGHT: It controls how bold or thin text appears. It can be specified with keywords or numerical values.
The font-weight property can take any one of these keyword values:
- bold: Bold font weight.
- normal: Normal font weight. This is the default value.
- lighter: One font weight lighter than the element’s parent value.
- bolder: One font weight bolder than the element’s parent value.

It can also take a numerical value. Numerical values can range from 1 (lightest) to 1000 (boldest), but it 
is common practice to use increments of 100. Keep in mind that not all fonts can be assigned a numeric 
font weight.

FONT STYLE: You can also *italicize* text with the font-style property. The font-style property also has a 
normal value which is the default.

TEXT TRANSFORMATION: Text can also be styled to appear in either all uppercase or lowercase with the 
text-transform property.

TEXT LAYOUT: Now we’ll learn about some ways text can be displayed or laid out within the element’s container.
- letter-spacing: It is used to set the horizontal spacing between the individual characters in an element.
	          It takes length values in units, such as 2px or 0.5em.
- word-spacing: You can set the space between words with it. It takes length values in units, such as 3px or 0.2em.
- line-height: We can use the it to set how tall we want each line containing our text to be. Line height 
	       values can be a unitless number, such as 1.2, or a length value, such as 12px, 5% or 2em.
	       Generally, the unitless value is preferred since it is responsive based on the current font size. 
	       If the line-height is specified by a unitless number, changing the font size will automatically 
	       re-adjust the line height.
- text-align: It aligns text to its parent element. For example, it can take the value *right*, or *justify*.

WEB FONTS USING <link>: Online font services, like *Google Fonts*, make it easy to find and link to fonts from 
your site. You can browse and select fonts that match the style of your website. 
When you’re done selecting a font ('Roboto', for example) and its styles, you can review your selected 
font family, and a <link> element will be automatically generated for you to use on your site!
Google Fonts link: https://fonts.google.com/

<head>
  <!-- Add the link element for Google Fonts along with other metadata -->
  <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@100&display=swap" rel="stylesheet">
<head>

The generated <link> element needs to be added to the <head> element in your HTML document for it to be ready 
to be used in your CSS.

p {
  font-family: 'Roboto', sans-serif;
}

You can then create font-family declarations in your CSS.

WEB FONTS USING @font-face: Fonts can also be added using a @font-face ruleset in your CSS stylesheet instead 
of using a <link> element in your HTML document.

Within the “Selected Families” section, you can use the “Download” button to download the font files to your 
computer. The files will be downloaded as a single format, in this case, TTF. You can use a tool such as 
Google Web Fonts Helper to generate additional file types for WOFF and WOFF2.

When you have the files you need, move them to a folder inside your website’s working directory, and you’re 
ready to use them in a @font-face ruleset!

@font-face {
  font-family: 'MyParagraphFont';
  src: url('fonts/Roboto.woff2') format('woff2'),
       url('fonts/Roboto.woff') format('woff'),
       url('fonts/Roboto.ttf') format('truetype');
}

- The @font-face at-rule is used as the selector. It’s recommended to define the @font-face ruleset at the 
top of your CSS stylesheet.
- The font-family property is used to set a custom name for the downloaded font. The name can be anything you choose.
- The src property contains three values, each specifying the relative path to the font file and its format. 
In this example, the font files are stored inside a folder named fonts within the working directory.

Once the @font-face at-rule is defined, you can use the font in your stylesheet!
